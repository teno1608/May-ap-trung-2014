
AVRASM ver. 2.1.30  C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm Mon Jul 28 19:49:16 2014

C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm(1060): warning: Register r5 already defined by the .DEF directive
C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm(1062): warning: Register r7 already defined by the .DEF directive
C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm(1063): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega64
                 ;Program type             : Application
                 ;Clock frequency          : 11,059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _k=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0051 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x0:
000046 002d
000047 514e
000048 4620
000049 6961      	.DB  0x2D,0x0,0x4E,0x51,0x20,0x46,0x61,0x69
00004a 7972
C:\Users\PHI LONG\Desktop\Fairy-Elab\pwm bulb\List\pwmbulb.asm(1110): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x72,0x79,0x0
                 _0x2000003:
00004c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004d 0002      	.DW  0x02
00004e 0504      	.DW  __base_y_G100
00004f 0098      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 __RESET:
000051 94f8      	CLI
000052 27ee      	CLR  R30
000053 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bff5      	OUT  MCUCR,R31
000056 bfe5      	OUT  MCUCR,R30
000057 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000059 e1f8      	LDI  R31,0x18
00005a bdf1      	OUT  WDTCR,R31
00005b bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e0a0      	LDI  R26,LOW(__SRAM_START)
000065 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000066 93ed      	ST   X+,R30
000067 9701      	SBIW R24,1
000068 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000069 e9ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006b 9185      	LPM  R24,Z+
00006c 9195      	LPM  R25,Z+
00006d 9700      	SBIW R24,0
00006e f061      	BREQ __GLOBAL_INI_END
00006f 91a5      	LPM  R26,Z+
000070 91b5      	LPM  R27,Z+
000071 9005      	LPM  R0,Z+
000072 9015      	LPM  R1,Z+
000073 01bf      	MOVW R22,R30
000074 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000075 9005      	LPM  R0,Z+
000076 920d      	ST   X+,R0
000077 9701      	SBIW R24,1
000078 f7e1      	BRNE __GLOBAL_INI_LOOP
000079 01fb      	MOVW R30,R22
00007a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007c bfed      	OUT  SPL,R30
00007d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000080 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000081 940c 0164 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega64
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;
                 ;unsigned char k;
                 ;long int i;
                 ;
                 ;void lcd_putnum (long int so,unsigned char x,unsigned char y)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _lcd_putnum:
                 ; 0000 0016    long int a, b, c, d, e;
                 ; 0000 0017    lcd_gotoxy (x, y) ;
000083 9764      	SBIW R28,20
                 ;	so -> Y+22
                 ;	x -> Y+21
                 ;	y -> Y+20
                 ;	a -> Y+16
                 ;	b -> Y+12
                 ;	c -> Y+8
                 ;	d -> Y+4
                 ;	e -> Y+0
000084 89ed      	LDD  R30,Y+21
000085 93ea      	ST   -Y,R30
000086 89ed      	LDD  R30,Y+21
000087 93ea      	ST   -Y,R30
000088 940e 0231 	CALL _lcd_gotoxy
                 ; 0000 0018    if (so<0) {lcd_putsf("-"); so=-so; }
00008a 8da9      	LDD  R26,Y+25
00008b 23aa      	TST  R26
00008c f482      	BRPL _0x3
                +
00008d e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00008e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00008f 93fa      	ST   -Y,R31
000090 93ea      	ST   -Y,R30
000091 940e 025e 	CALL _lcd_putsf
                +
000093 89ee     +LDD R30 , Y + 22
000094 89ff     +LDD R31 , Y + 22 + 1
000095 8d68     +LDD R22 , Y + 22 + 2
000096 8d79     +LDD R23 , Y + 22 + 3
                 	__GETD1S 22
000097 940e 0318 	CALL __ANEGD1
                +
000099 8bee     +STD Y + 22 , R30
00009a 8bff     +STD Y + 22 + 1 , R31
00009b 8f68     +STD Y + 22 + 2 , R22
00009c 8f79     +STD Y + 22 + 3 , R23
                 	__PUTD1S 22
                 ; 0000 0019    a = so / 10000;
                 _0x3:
00009d 940e 029e 	CALL SUBOPT_0x0
                +
00009f e1e0     +LDI R30 , LOW ( 0x2710 )
0000a0 e2f7     +LDI R31 , HIGH ( 0x2710 )
0000a1 e060     +LDI R22 , BYTE3 ( 0x2710 )
0000a2 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0000a3 940e 036a 	CALL __DIVD21
                +
0000a5 8be8     +STD Y + 16 , R30
0000a6 8bf9     +STD Y + 16 + 1 , R31
0000a7 8b6a     +STD Y + 16 + 2 , R22
0000a8 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ; 0000 001A    b = (so - 10000 * a) / 1000;
0000a9 940e 02a3 	CALL SUBOPT_0x1
0000ab 940e 0313 	CALL __SUBD21
                +
0000ad eee8     +LDI R30 , LOW ( 0x3E8 )
0000ae e0f3     +LDI R31 , HIGH ( 0x3E8 )
0000af e060     +LDI R22 , BYTE3 ( 0x3E8 )
0000b0 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0000b1 940e 036a 	CALL __DIVD21
                +
0000b3 87ec     +STD Y + 12 , R30
0000b4 87fd     +STD Y + 12 + 1 , R31
0000b5 876e     +STD Y + 12 + 2 , R22
0000b6 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0000 001B    c = (so - 10000 * a - 1000 * b) / 100;
0000b7 940e 02a3 	CALL SUBOPT_0x1
0000b9 940e 02ae 	CALL SUBOPT_0x2
0000bb 937f      	PUSH R23
0000bc 936f      	PUSH R22
0000bd 93ff      	PUSH R31
0000be 93ef      	PUSH R30
0000bf 940e 02b3 	CALL SUBOPT_0x3
0000c1 91af      	POP  R26
0000c2 91bf      	POP  R27
0000c3 918f      	POP  R24
0000c4 919f      	POP  R25
0000c5 940e 0313 	CALL __SUBD21
                +
0000c7 e6e4     +LDI R30 , LOW ( 0x64 )
0000c8 e0f0     +LDI R31 , HIGH ( 0x64 )
0000c9 e060     +LDI R22 , BYTE3 ( 0x64 )
0000ca e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0000cb 940e 036a 	CALL __DIVD21
                +
0000cd 87e8     +STD Y + 8 , R30
0000ce 87f9     +STD Y + 8 + 1 , R31
0000cf 876a     +STD Y + 8 + 2 , R22
0000d0 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 001C    d = (so - 10000 * a - 1000 * b - 100 * c) / 10;
0000d1 940e 02a3 	CALL SUBOPT_0x1
0000d3 940e 02ae 	CALL SUBOPT_0x2
0000d5 937f      	PUSH R23
0000d6 936f      	PUSH R22
0000d7 93ff      	PUSH R31
0000d8 93ef      	PUSH R30
0000d9 940e 02b3 	CALL SUBOPT_0x3
0000db 91af      	POP  R26
0000dc 91bf      	POP  R27
0000dd 918f      	POP  R24
0000de 919f      	POP  R25
0000df 940e 02ae 	CALL SUBOPT_0x2
0000e1 937f      	PUSH R23
0000e2 936f      	PUSH R22
0000e3 93ff      	PUSH R31
0000e4 93ef      	PUSH R30
0000e5 940e 02be 	CALL SUBOPT_0x4
0000e7 91af      	POP  R26
0000e8 91bf      	POP  R27
0000e9 918f      	POP  R24
0000ea 919f      	POP  R25
0000eb 940e 0313 	CALL __SUBD21
                +
0000ed e0ea     +LDI R30 , LOW ( 0xA )
0000ee e0f0     +LDI R31 , HIGH ( 0xA )
0000ef e060     +LDI R22 , BYTE3 ( 0xA )
0000f0 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0000f1 940e 036a 	CALL __DIVD21
                +
0000f3 83ec     +STD Y + 4 , R30
0000f4 83fd     +STD Y + 4 + 1 , R31
0000f5 836e     +STD Y + 4 + 2 , R22
0000f6 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 001D    e = so - 10000 * a - 1000 * b - 100 * c - 10 * d;
0000f7 940e 02a3 	CALL SUBOPT_0x1
0000f9 940e 02ae 	CALL SUBOPT_0x2
0000fb 937f      	PUSH R23
0000fc 936f      	PUSH R22
0000fd 93ff      	PUSH R31
0000fe 93ef      	PUSH R30
0000ff 940e 02b3 	CALL SUBOPT_0x3
000101 91af      	POP  R26
000102 91bf      	POP  R27
000103 918f      	POP  R24
000104 919f      	POP  R25
000105 940e 02ae 	CALL SUBOPT_0x2
000107 937f      	PUSH R23
000108 936f      	PUSH R22
000109 93ff      	PUSH R31
00010a 93ef      	PUSH R30
00010b 940e 02be 	CALL SUBOPT_0x4
00010d 91af      	POP  R26
00010e 91bf      	POP  R27
00010f 918f      	POP  R24
000110 919f      	POP  R25
000111 940e 02ae 	CALL SUBOPT_0x2
000113 937f      	PUSH R23
000114 936f      	PUSH R22
000115 93ff      	PUSH R31
000116 93ef      	PUSH R30
                +
000117 81ec     +LDD R30 , Y + 4
000118 81fd     +LDD R31 , Y + 4 + 1
000119 816e     +LDD R22 , Y + 4 + 2
00011a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
00011b e0aa     +LDI R26 , LOW ( 0xA )
00011c e0b0     +LDI R27 , HIGH ( 0xA )
00011d e080     +LDI R24 , BYTE3 ( 0xA )
00011e e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00011f 940e 0340 	CALL __MULD12
000121 91af      	POP  R26
000122 91bf      	POP  R27
000123 918f      	POP  R24
000124 919f      	POP  R25
000125 940e 0313 	CALL __SUBD21
000127 940e 0382 	CALL __PUTD2S0
                 ; 0000 001E    if(so>10000)  lcd_putchar (a + 48) ;
000129 d174      	RCALL SUBOPT_0x0
                +
00012a 31a1     +CPI R26 , LOW ( 0x2711 )
00012b e2e7     +LDI R30 , HIGH ( 0x2711 )
00012c 07be     +CPC R27 , R30
00012d e0e0     +LDI R30 , BYTE3 ( 0x2711 )
00012e 078e     +CPC R24 , R30
00012f e0e0     +LDI R30 , BYTE4 ( 0x2711 )
000130 079e     +CPC R25 , R30
                 	__CPD2N 0x2711
000131 f01c      	BRLT _0x4
000132 89e8      	LDD  R30,Y+16
000133 940e 02c9 	CALL SUBOPT_0x5
                 ; 0000 001F    if(so>1000) lcd_putchar (b + 48) ;
                 _0x4:
000135 d168      	RCALL SUBOPT_0x0
                +
000136 3ea9     +CPI R26 , LOW ( 0x3E9 )
000137 e0e3     +LDI R30 , HIGH ( 0x3E9 )
000138 07be     +CPC R27 , R30
000139 e0e0     +LDI R30 , BYTE3 ( 0x3E9 )
00013a 078e     +CPC R24 , R30
00013b e0e0     +LDI R30 , BYTE4 ( 0x3E9 )
00013c 079e     +CPC R25 , R30
                 	__CPD2N 0x3E9
00013d f014      	BRLT _0x5
00013e 85ec      	LDD  R30,Y+12
00013f d189      	RCALL SUBOPT_0x5
                 ; 0000 0020    if(so>100) lcd_putchar (c + 48) ;
                 _0x5:
000140 d15d      	RCALL SUBOPT_0x0
                +
000141 36a5     +CPI R26 , LOW ( 0x65 )
000142 e0e0     +LDI R30 , HIGH ( 0x65 )
000143 07be     +CPC R27 , R30
000144 e0e0     +LDI R30 , BYTE3 ( 0x65 )
000145 078e     +CPC R24 , R30
000146 e0e0     +LDI R30 , BYTE4 ( 0x65 )
000147 079e     +CPC R25 , R30
                 	__CPD2N 0x65
000148 f014      	BRLT _0x6
000149 85e8      	LDD  R30,Y+8
00014a d17e      	RCALL SUBOPT_0x5
                 ; 0000 0021    if(so>10) lcd_putchar (d + 48) ;
                 _0x6:
00014b d152      	RCALL SUBOPT_0x0
                +
00014c 30ab     +CPI R26 , LOW ( 0xB )
00014d e0e0     +LDI R30 , HIGH ( 0xB )
00014e 07be     +CPC R27 , R30
00014f e0e0     +LDI R30 , BYTE3 ( 0xB )
000150 078e     +CPC R24 , R30
000151 e0e0     +LDI R30 , BYTE4 ( 0xB )
000152 079e     +CPC R25 , R30
                 	__CPD2N 0xB
000153 f014      	BRLT _0x7
000154 81ec      	LDD  R30,Y+4
000155 d173      	RCALL SUBOPT_0x5
                 ; 0000 0022    lcd_putchar (e + 48) ;
                 _0x7:
000156 81e8      	LD   R30,Y
000157 d171      	RCALL SUBOPT_0x5
                 ; 0000 0023 }
000158 966a      	ADIW R28,26
000159 9508      	RET
                 ;
                 ;void beep()
                 ; 0000 0026 {
                 _beep:
                 ; 0000 0027 DDRC.7=1;
00015a 9aa7      	SBI  0x14,7
                 ; 0000 0028 PORTC.7=0;
00015b 98af      	CBI  0x15,7
                 ; 0000 0029 delay_ms(30);
00015c e1ee      	LDI  R30,LOW(30)
00015d e0f0      	LDI  R31,HIGH(30)
00015e d16d      	RCALL SUBOPT_0x6
                 ; 0000 002A PORTC.7=1;
00015f 9aaf      	SBI  0x15,7
                 ; 0000 002B delay_ms(70);
000160 e4e6      	LDI  R30,LOW(70)
000161 e0f0      	LDI  R31,HIGH(70)
000162 d169      	RCALL SUBOPT_0x6
                 ; 0000 002C }
000163 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 002F {
                 _main:
                 ; 0000 0030 // Declare your local variables here
                 ; 0000 0031 
                 ; 0000 0032 // Input/Output Ports initialization
                 ; 0000 0033 // Port A initialization
                 ; 0000 0034 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0035 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0036 PORTA=0x00;
000164 e0e0      	LDI  R30,LOW(0)
000165 bbeb      	OUT  0x1B,R30
                 ; 0000 0037 DDRA=0x00;
000166 bbea      	OUT  0x1A,R30
                 ; 0000 0038 
                 ; 0000 0039 // Port B initialization
                 ; 0000 003A // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 003B // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 003C PORTB=0xff;
000167 efef      	LDI  R30,LOW(255)
000168 bbe8      	OUT  0x18,R30
                 ; 0000 003D DDRB=0xff;
000169 bbe7      	OUT  0x17,R30
                 ; 0000 003E 
                 ; 0000 003F // Port C initialization
                 ; 0000 0040 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0041 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0042 PORTC=0x00;
00016a e0e0      	LDI  R30,LOW(0)
00016b bbe5      	OUT  0x15,R30
                 ; 0000 0043 DDRC=0x00;
00016c bbe4      	OUT  0x14,R30
                 ; 0000 0044 
                 ; 0000 0045 // Port D initialization
                 ; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0047 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0048 PORTD=0x00;
00016d bbe2      	OUT  0x12,R30
                 ; 0000 0049 DDRD=0x00;
00016e bbe1      	OUT  0x11,R30
                 ; 0000 004A 
                 ; 0000 004B // Port E initialization
                 ; 0000 004C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 004D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 004E PORTE=0x00;
00016f b9e3      	OUT  0x3,R30
                 ; 0000 004F DDRE=0x00;
000170 b9e2      	OUT  0x2,R30
                 ; 0000 0050 
                 ; 0000 0051 // Port F initialization
                 ; 0000 0052 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0053 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0054 PORTF=0x00;
000171 93e0 0062 	STS  98,R30
                 ; 0000 0055 DDRF=0x00;
000173 93e0 0061 	STS  97,R30
                 ; 0000 0056 
                 ; 0000 0057 // Port G initialization
                 ; 0000 0058 // Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0059 // State4=T State3=T State2=T State1=T State0=T
                 ; 0000 005A PORTG=0x00;
000175 93e0 0065 	STS  101,R30
                 ; 0000 005B DDRG=0x00;
000177 93e0 0064 	STS  100,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 0 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: Timer 0 Stopped
                 ; 0000 0060 // Mode: Normal top=0xFF
                 ; 0000 0061 // OC0 output: Disconnected
                 ; 0000 0062 ASSR=0x00;
000179 bfe0      	OUT  0x30,R30
                 ; 0000 0063 TCCR0=0x00;
00017a bfe3      	OUT  0x33,R30
                 ; 0000 0064 TCNT0=0x00;
00017b bfe2      	OUT  0x32,R30
                 ; 0000 0065 OCR0=0x00;
00017c bfe1      	OUT  0x31,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 1 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: 11059,200 kHz
                 ; 0000 006A // Mode: Fast PWM top=ICR1
                 ; 0000 006B // OC1A output: Inverted
                 ; 0000 006C // OC1B output: Discon.
                 ; 0000 006D // OC1C output: Discon.
                 ; 0000 006E // Noise Canceler: Off
                 ; 0000 006F // Input Capture on Falling Edge
                 ; 0000 0070 // Timer1 Overflow Interrupt: Off
                 ; 0000 0071 // Input Capture Interrupt: Off
                 ; 0000 0072 // Compare A Match Interrupt: Off
                 ; 0000 0073 // Compare B Match Interrupt: Off
                 ; 0000 0074 // Compare C Match Interrupt: Off
                 ; 0000 0075 TCCR1A=0xC2;
00017d ece2      	LDI  R30,LOW(194)
00017e bdef      	OUT  0x2F,R30
                 ; 0000 0076 TCCR1B=0x19;
00017f e1e9      	LDI  R30,LOW(25)
000180 bdee      	OUT  0x2E,R30
                 ; 0000 0077 TCNT1H=0x00;
000181 e0e0      	LDI  R30,LOW(0)
000182 bded      	OUT  0x2D,R30
                 ; 0000 0078 TCNT1L=0x00;
000183 bdec      	OUT  0x2C,R30
                 ; 0000 0079 ICR1H=0x00;
000184 bde7      	OUT  0x27,R30
                 ; 0000 007A ICR1L=0x00;
000185 bde6      	OUT  0x26,R30
                 ; 0000 007B ICR1=60000;
000186 e6e0      	LDI  R30,LOW(60000)
000187 eefa      	LDI  R31,HIGH(60000)
000188 bdf7      	OUT  0x26+1,R31
000189 bde6      	OUT  0x26,R30
                 ; 0000 007C OCR1AH=0x00;
00018a e0e0      	LDI  R30,LOW(0)
00018b bdeb      	OUT  0x2B,R30
                 ; 0000 007D OCR1AL=0x00;
00018c bdea      	OUT  0x2A,R30
                 ; 0000 007E OCR1BH=0x00;
00018d bde9      	OUT  0x29,R30
                 ; 0000 007F OCR1BL=0x00;
00018e bde8      	OUT  0x28,R30
                 ; 0000 0080 OCR1CH=0x00;
00018f 93e0 0079 	STS  121,R30
                 ; 0000 0081 OCR1CL=0x00;
000191 93e0 0078 	STS  120,R30
                 ; 0000 0082 
                 ; 0000 0083 // Timer/Counter 2 initialization
                 ; 0000 0084 // Clock source: System Clock
                 ; 0000 0085 // Clock value: Timer2 Stopped
                 ; 0000 0086 // Mode: Normal top=0xFF
                 ; 0000 0087 // OC2 output: Disconnected
                 ; 0000 0088 TCCR2=0x00;
000193 bde5      	OUT  0x25,R30
                 ; 0000 0089 TCNT2=0x00;
000194 bde4      	OUT  0x24,R30
                 ; 0000 008A OCR2=0x00;
000195 bde3      	OUT  0x23,R30
                 ; 0000 008B 
                 ; 0000 008C // Timer/Counter 3 initialization
                 ; 0000 008D // Clock source: System Clock
                 ; 0000 008E // Clock value: Timer3 Stopped
                 ; 0000 008F // Mode: Normal top=0xFFFF
                 ; 0000 0090 // OC3A output: Discon.
                 ; 0000 0091 // OC3B output: Discon.
                 ; 0000 0092 // OC3C output: Discon.
                 ; 0000 0093 // Noise Canceler: Off
                 ; 0000 0094 // Input Capture on Falling Edge
                 ; 0000 0095 // Timer3 Overflow Interrupt: Off
                 ; 0000 0096 // Input Capture Interrupt: Off
                 ; 0000 0097 // Compare A Match Interrupt: Off
                 ; 0000 0098 // Compare B Match Interrupt: Off
                 ; 0000 0099 // Compare C Match Interrupt: Off
                 ; 0000 009A TCCR3A=0x00;
000196 93e0 008b 	STS  139,R30
                 ; 0000 009B TCCR3B=0x00;
000198 93e0 008a 	STS  138,R30
                 ; 0000 009C TCNT3H=0x00;
00019a 93e0 0089 	STS  137,R30
                 ; 0000 009D TCNT3L=0x00;
00019c 93e0 0088 	STS  136,R30
                 ; 0000 009E ICR3H=0x00;
00019e 93e0 0081 	STS  129,R30
                 ; 0000 009F ICR3L=0x00;
0001a0 93e0 0080 	STS  128,R30
                 ; 0000 00A0 OCR3AH=0x00;
0001a2 93e0 0087 	STS  135,R30
                 ; 0000 00A1 OCR3AL=0x00;
0001a4 93e0 0086 	STS  134,R30
                 ; 0000 00A2 OCR3BH=0x00;
0001a6 93e0 0085 	STS  133,R30
                 ; 0000 00A3 OCR3BL=0x00;
0001a8 93e0 0084 	STS  132,R30
                 ; 0000 00A4 OCR3CH=0x00;
0001aa 93e0 0083 	STS  131,R30
                 ; 0000 00A5 OCR3CL=0x00;
0001ac 93e0 0082 	STS  130,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // External Interrupt(s) initialization
                 ; 0000 00A8 // INT0: Off
                 ; 0000 00A9 // INT1: Off
                 ; 0000 00AA // INT2: Off
                 ; 0000 00AB // INT3: Off
                 ; 0000 00AC // INT4: Off
                 ; 0000 00AD // INT5: Off
                 ; 0000 00AE // INT6: Off
                 ; 0000 00AF // INT7: Off
                 ; 0000 00B0 EICRA=0x00;
0001ae 93e0 006a 	STS  106,R30
                 ; 0000 00B1 EICRB=0x00;
0001b0 bfea      	OUT  0x3A,R30
                 ; 0000 00B2 EIMSK=0x00;
0001b1 bfe9      	OUT  0x39,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B5 TIMSK=0x00;
0001b2 bfe7      	OUT  0x37,R30
                 ; 0000 00B6 
                 ; 0000 00B7 ETIMSK=0x00;
0001b3 93e0 007d 	STS  125,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // USART0 initialization
                 ; 0000 00BA // USART0 disabled
                 ; 0000 00BB UCSR0B=0x00;
0001b5 b9ea      	OUT  0xA,R30
                 ; 0000 00BC 
                 ; 0000 00BD // USART1 initialization
                 ; 0000 00BE // USART1 disabled
                 ; 0000 00BF UCSR1B=0x00;
0001b6 93e0 009a 	STS  154,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Analog Comparator initialization
                 ; 0000 00C2 // Analog Comparator: Off
                 ; 0000 00C3 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00C4 ACSR=0x80;
0001b8 e8e0      	LDI  R30,LOW(128)
0001b9 b9e8      	OUT  0x8,R30
                 ; 0000 00C5 SFIOR=0x00;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb bde0      	OUT  0x20,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // ADC initialization
                 ; 0000 00C8 // ADC disabled
                 ; 0000 00C9 ADCSRA=0x00;
0001bc b9e6      	OUT  0x6,R30
                 ; 0000 00CA 
                 ; 0000 00CB // SPI initialization
                 ; 0000 00CC // SPI disabled
                 ; 0000 00CD SPCR=0x00;
0001bd b9ed      	OUT  0xD,R30
                 ; 0000 00CE 
                 ; 0000 00CF // TWI initialization
                 ; 0000 00D0 // TWI disabled
                 ; 0000 00D1 TWCR=0x00;
0001be 93e0 0074 	STS  116,R30
                 ; 0000 00D2 
                 ; 0000 00D3 // Alphanumeric LCD initialization
                 ; 0000 00D4 // Connections specified in the
                 ; 0000 00D5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00D6 // RS - PORTE Bit 0
                 ; 0000 00D7 // RD - PORTE Bit 1
                 ; 0000 00D8 // EN - PORTE Bit 2
                 ; 0000 00D9 // D4 - PORTE Bit 4
                 ; 0000 00DA // D5 - PORTE Bit 5
                 ; 0000 00DB // D6 - PORTE Bit 6
                 ; 0000 00DC // D7 - PORTE Bit 7
                 ; 0000 00DD // Characters/line: 20
                 ; 0000 00DE lcd_init(20);
0001c0 e1e4      	LDI  R30,LOW(20)
0001c1 93ea      	ST   -Y,R30
0001c2 d0ac      	RCALL _lcd_init
                 ; 0000 00DF 
                 ; 0000 00E0 lcd_putsf("NQ Fairy");
                +
0001c3 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 2 ) )
0001c4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW1FN _0x0,2
0001c5 93fa      	ST   -Y,R31
0001c6 93ea      	ST   -Y,R30
0001c7 d096      	RCALL _lcd_putsf
                 ; 0000 00E1 for (k=0;k<4;k++) beep();
0001c8 2455      	CLR  R5
                 _0xF:
0001c9 e0e4      	LDI  R30,LOW(4)
0001ca 165e      	CP   R5,R30
0001cb f418      	BRSH _0x10
0001cc df8d      	RCALL _beep
0001cd 9453      	INC  R5
0001ce cffa      	RJMP _0xF
                 _0x10:
                 ; 0000 00E2 lcd_clear();
0001cf d06e      	RCALL _lcd_clear
                 ; 0000 00E3 delay_ms(500);
0001d0 efe4      	LDI  R30,LOW(500)
0001d1 e0f1      	LDI  R31,HIGH(500)
0001d2 d0f9      	RCALL SUBOPT_0x6
                 ; 0000 00E4 
                 ; 0000 00E5 while (1)
                 _0x11:
                 ; 0000 00E6       {
                 ; 0000 00E7       // Place your code here
                 ; 0000 00E8       /*
                 ; 0000 00E9       PORTB.7=1;
                 ; 0000 00EA       delay_ms(10);
                 ; 0000 00EB       PORTB.7=0;
                 ; 0000 00EC       delay_ms(10);
                 ; 0000 00ED       */
                 ; 0000 00EE 
                 ; 0000 00EF 
                 ; 0000 00F0       i=0;
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93e0 0500 	STS  _i,R30
0001d6 93e0 0501 	STS  _i+1,R30
0001d8 93e0 0502 	STS  _i+2,R30
0001da 93e0 0503 	STS  _i+3,R30
                 ; 0000 00F1       while (i<=60000 )
                 _0x14:
0001dc 91a0 0500 	LDS  R26,_i
0001de 91b0 0501 	LDS  R27,_i+1
0001e0 9180 0502 	LDS  R24,_i+2
0001e2 9190 0503 	LDS  R25,_i+3
                +
0001e4 36a1     +CPI R26 , LOW ( 0xEA61 )
0001e5 eeea     +LDI R30 , HIGH ( 0xEA61 )
0001e6 07be     +CPC R27 , R30
0001e7 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
0001e8 078e     +CPC R24 , R30
0001e9 e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
0001ea 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
0001eb f43c      	BRGE _0x16
                 ; 0000 00F2         {
                 ; 0000 00F3         i=i+50;
0001ec d0e3      	RCALL SUBOPT_0x7
                +
0001ed 5cee     +SUBI R30 , LOW ( - 50 )
0001ee 4fff     +SBCI R31 , HIGH ( - 50 )
0001ef 4f6f     +SBCI R22 , BYTE3 ( - 50 )
0001f0 4f7f     +SBCI R23 , BYTE4 ( - 50 )
                 	__ADDD1N 50
0001f1 d0e7      	RCALL SUBOPT_0x8
                 ; 0000 00F4         OCR1A=i;
                 ; 0000 00F5         lcd_putnum(OCR1A,0,0);
                 ; 0000 00F6         delay_ms(10);
                 ; 0000 00F7         }
0001f2 cfe9      	RJMP _0x14
                 _0x16:
                 ; 0000 00F8       while (i>=0 )
                 _0x17:
0001f3 91a0 0503 	LDS  R26,_i+3
0001f5 23aa      	TST  R26
0001f6 f03a      	BRMI _0x19
                 ; 0000 00F9         {
                 ; 0000 00FA         i=i-50;
0001f7 d0d8      	RCALL SUBOPT_0x7
                +
0001f8 53e2     +SUBI R30 , LOW ( 50 )
0001f9 40f0     +SBCI R31 , HIGH ( 50 )
0001fa 4060     +SBCI R22 , BYTE3 ( 50 )
0001fb 4070     +SBCI R23 , BYTE4 ( 50 )
                 	__SUBD1N 50
0001fc d0dc      	RCALL SUBOPT_0x8
                 ; 0000 00FB         OCR1A=i;
                 ; 0000 00FC         lcd_putnum(OCR1A,0,0);
                 ; 0000 00FD         delay_ms(10);
                 ; 0000 00FE         }
0001fd cff5      	RJMP _0x17
                 _0x19:
                 ; 0000 00FF 
                 ; 0000 0100       }
0001fe cfd4      	RJMP _0x11
                 ; 0000 0101 }
                 _0x1A:
0001ff cfff      	RJMP _0x1A
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
000200 81e8      	LD   R30,Y
000201 71e0      	ANDI R30,LOW(0x10)
000202 f011      	BREQ _0x2000004
000203 9a1c      	SBI  0x3,4
000204 c001      	RJMP _0x2000005
                 _0x2000004:
000205 981c      	CBI  0x3,4
                 _0x2000005:
000206 81e8      	LD   R30,Y
000207 72e0      	ANDI R30,LOW(0x20)
000208 f011      	BREQ _0x2000006
000209 9a1d      	SBI  0x3,5
00020a c001      	RJMP _0x2000007
                 _0x2000006:
00020b 981d      	CBI  0x3,5
                 _0x2000007:
00020c 81e8      	LD   R30,Y
00020d 74e0      	ANDI R30,LOW(0x40)
00020e f011      	BREQ _0x2000008
00020f 9a1e      	SBI  0x3,6
000210 c001      	RJMP _0x2000009
                 _0x2000008:
000211 981e      	CBI  0x3,6
                 _0x2000009:
000212 81e8      	LD   R30,Y
000213 78e0      	ANDI R30,LOW(0x80)
000214 f011      	BREQ _0x200000A
000215 9a1f      	SBI  0x3,7
000216 c001      	RJMP _0x200000B
                 _0x200000A:
000217 981f      	CBI  0x3,7
                 _0x200000B:
                +
000218 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
000219 958a     +DEC R24
00021a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
00021b 9a1a      	SBI  0x3,2
                +
00021c e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
00021d 958a     +DEC R24
00021e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
00021f 981a      	CBI  0x3,2
                +
000220 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
000221 958a     +DEC R24
000222 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
000223 c078      	RJMP _0x2020001
                 __lcd_write_data:
000224 81e8      	LD   R30,Y
000225 93ea      	ST   -Y,R30
000226 dfd9      	RCALL __lcd_write_nibble_G100
000227 81e8          ld    r30,y
000228 95e2          swap  r30
000229 83e8          st    y,r30
00022a 81e8      	LD   R30,Y
00022b 93ea      	ST   -Y,R30
00022c dfd3      	RCALL __lcd_write_nibble_G100
                +
00022d eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
00022e 958a     +DEC R24
00022f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
000230 c06b      	RJMP _0x2020001
                 _lcd_gotoxy:
000231 81e8      	LD   R30,Y
000232 e0f0      	LDI  R31,0
000233 5fec      	SUBI R30,LOW(-__base_y_G100)
000234 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000235 81e0      	LD   R30,Z
000236 81a9      	LDD  R26,Y+1
000237 0fea      	ADD  R30,R26
000238 93ea      	ST   -Y,R30
000239 dfea      	RCALL __lcd_write_data
00023a 8049      	LDD  R4,Y+1
00023b 8078      	LDD  R7,Y+0
00023c 9622      	ADIW R28,2
00023d 9508      	RET
                 _lcd_clear:
00023e e0e2      	LDI  R30,LOW(2)
00023f d0b5      	RCALL SUBOPT_0x9
000240 e0ec      	LDI  R30,LOW(12)
000241 93ea      	ST   -Y,R30
000242 dfe1      	RCALL __lcd_write_data
000243 e0e1      	LDI  R30,LOW(1)
000244 d0b0      	RCALL SUBOPT_0x9
000245 e0e0      	LDI  R30,LOW(0)
000246 2e7e      	MOV  R7,R30
000247 2e4e      	MOV  R4,R30
000248 9508      	RET
                 _lcd_putchar:
000249 81a8      	LD   R26,Y
00024a 30aa      	CPI  R26,LOW(0xA)
00024b f011      	BREQ _0x2000011
00024c 1446      	CP   R4,R6
00024d f048      	BRLO _0x2000010
                 _0x2000011:
00024e e0e0      	LDI  R30,LOW(0)
00024f 93ea      	ST   -Y,R30
000250 9473      	INC  R7
000251 927a      	ST   -Y,R7
000252 dfde      	RCALL _lcd_gotoxy
000253 81a8      	LD   R26,Y
000254 30aa      	CPI  R26,LOW(0xA)
000255 f409      	BRNE _0x2000013
000256 c045      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
000257 9443      	INC  R4
000258 9a18      	SBI  0x3,0
000259 81e8      	LD   R30,Y
00025a 93ea      	ST   -Y,R30
00025b dfc8      	RCALL __lcd_write_data
00025c 9818      	CBI  0x3,0
00025d c03e      	RJMP _0x2020001
                 _lcd_putsf:
00025e 931a      	ST   -Y,R17
                 _0x2000017:
00025f 81e9      	LDD  R30,Y+1
000260 81fa      	LDD  R31,Y+1+1
000261 9631      	ADIW R30,1
000262 83e9      	STD  Y+1,R30
000263 83fa      	STD  Y+1+1,R31
000264 9731      	SBIW R30,1
000265 91e4      	LPM  R30,Z
000266 2f1e      	MOV  R17,R30
000267 30e0      	CPI  R30,0
000268 f019      	BREQ _0x2000019
000269 931a      	ST   -Y,R17
00026a dfde      	RCALL _lcd_putchar
00026b cff3      	RJMP _0x2000017
                 _0x2000019:
00026c 8118      	LDD  R17,Y+0
00026d 9623      	ADIW R28,3
00026e 9508      	RET
                 _lcd_init:
00026f 9a14      	SBI  0x2,4
000270 9a15      	SBI  0x2,5
000271 9a16      	SBI  0x2,6
000272 9a17      	SBI  0x2,7
000273 9a12      	SBI  0x2,2
000274 9a10      	SBI  0x2,0
000275 9a11      	SBI  0x2,1
000276 981a      	CBI  0x3,2
000277 9818      	CBI  0x3,0
000278 9819      	CBI  0x3,1
000279 8068      	LDD  R6,Y+0
00027a 81e8      	LD   R30,Y
00027b 58e0      	SUBI R30,-LOW(128)
                +
00027c 93e0 0506+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00027e 81e8      	LD   R30,Y
00027f 54e0      	SUBI R30,-LOW(192)
                +
000280 93e0 0507+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000282 e1e4      	LDI  R30,LOW(20)
000283 e0f0      	LDI  R31,HIGH(20)
000284 d047      	RCALL SUBOPT_0x6
000285 d074      	RCALL SUBOPT_0xA
000286 d073      	RCALL SUBOPT_0xA
000287 d072      	RCALL SUBOPT_0xA
000288 e2e0      	LDI  R30,LOW(32)
000289 93ea      	ST   -Y,R30
00028a df75      	RCALL __lcd_write_nibble_G100
                +
00028b e184     +LDI R24 , LOW ( 276 )
00028c e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
00028d 9701     +SBIW R24 , 1
00028e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
00028f e2e8      	LDI  R30,LOW(40)
000290 93ea      	ST   -Y,R30
000291 df92      	RCALL __lcd_write_data
000292 e0e4      	LDI  R30,LOW(4)
000293 93ea      	ST   -Y,R30
000294 df8f      	RCALL __lcd_write_data
000295 e8e5      	LDI  R30,LOW(133)
000296 93ea      	ST   -Y,R30
000297 df8c      	RCALL __lcd_write_data
000298 e0e6      	LDI  R30,LOW(6)
000299 93ea      	ST   -Y,R30
00029a df89      	RCALL __lcd_write_data
00029b dfa2      	RCALL _lcd_clear
                 _0x2020001:
00029c 9621      	ADIW R28,1
00029d 9508      	RET
                 
                 	.DSEG
                 _i:
000500           	.BYTE 0x4
                 __base_y_G100:
000504           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
                +
00029e 89ae     +LDD R26 , Y + 22
00029f 89bf     +LDD R27 , Y + 22 + 1
0002a0 8d88     +LDD R24 , Y + 22 + 2
0002a1 8d99     +LDD R25 , Y + 22 + 3
                 	__GETD2S 22
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1:
                +
0002a3 89e8     +LDD R30 , Y + 16
0002a4 89f9     +LDD R31 , Y + 16 + 1
0002a5 896a     +LDD R22 , Y + 16 + 2
0002a6 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0002a7 e1a0     +LDI R26 , LOW ( 0x2710 )
0002a8 e2b7     +LDI R27 , HIGH ( 0x2710 )
0002a9 e080     +LDI R24 , BYTE3 ( 0x2710 )
0002aa e090     +LDI R25 , BYTE4 ( 0x2710 )
                 	__GETD2N 0x2710
0002ab 940e 0340 	CALL __MULD12
0002ad cff0      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0002ae 940e 038c 	CALL __SWAPD12
0002b0 940e 030e 	CALL __SUBD12
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
                +
0002b3 85ec     +LDD R30 , Y + 12
0002b4 85fd     +LDD R31 , Y + 12 + 1
0002b5 856e     +LDD R22 , Y + 12 + 2
0002b6 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
                +
0002b7 eea8     +LDI R26 , LOW ( 0x3E8 )
0002b8 e0b3     +LDI R27 , HIGH ( 0x3E8 )
0002b9 e080     +LDI R24 , BYTE3 ( 0x3E8 )
0002ba e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
0002bb 940e 0340 	CALL __MULD12
0002bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
                +
0002be 85e8     +LDD R30 , Y + 8
0002bf 85f9     +LDD R31 , Y + 8 + 1
0002c0 856a     +LDD R22 , Y + 8 + 2
0002c1 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
0002c2 e6a4     +LDI R26 , LOW ( 0x64 )
0002c3 e0b0     +LDI R27 , HIGH ( 0x64 )
0002c4 e080     +LDI R24 , BYTE3 ( 0x64 )
0002c5 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
0002c6 940e 0340 	CALL __MULD12
0002c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0002c9 5de0      	SUBI R30,-LOW(48)
0002ca 93ea      	ST   -Y,R30
0002cb cf7d      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
0002cc 93fa      	ST   -Y,R31
0002cd 93ea      	ST   -Y,R30
0002ce 940c 0302 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0002d0 91e0 0500 	LDS  R30,_i
0002d2 91f0 0501 	LDS  R31,_i+1
0002d4 9160 0502 	LDS  R22,_i+2
0002d6 9170 0503 	LDS  R23,_i+3
0002d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x8:
0002d9 93e0 0500 	STS  _i,R30
0002db 93f0 0501 	STS  _i+1,R31
0002dd 9360 0502 	STS  _i+2,R22
0002df 9370 0503 	STS  _i+3,R23
0002e1 91e0 0500 	LDS  R30,_i
0002e3 91f0 0501 	LDS  R31,_i+1
0002e5 bdfb      	OUT  0x2A+1,R31
0002e6 bdea      	OUT  0x2A,R30
0002e7 b5ea      	IN   R30,0x2A
0002e8 b5fb      	IN   R31,0x2A+1
0002e9 2766      	CLR  R22
0002ea 2777      	CLR  R23
0002eb 940e 0387 	CALL __PUTPARD1
0002ed e0e0      	LDI  R30,LOW(0)
0002ee 93ea      	ST   -Y,R30
0002ef 93ea      	ST   -Y,R30
0002f0 940e 0083 	CALL _lcd_putnum
0002f2 e0ea      	LDI  R30,LOW(10)
0002f3 e0f0      	LDI  R31,HIGH(10)
0002f4 cfd7      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0002f5 93ea      	ST   -Y,R30
0002f6 df2d      	RCALL __lcd_write_data
0002f7 e0e3      	LDI  R30,LOW(3)
0002f8 e0f0      	LDI  R31,HIGH(3)
0002f9 cfd2      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0002fa e3e0      	LDI  R30,LOW(48)
0002fb 93ea      	ST   -Y,R30
0002fc df03      	RCALL __lcd_write_nibble_G100
                +
0002fd e184     +LDI R24 , LOW ( 276 )
0002fe e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0002ff 9701     +SBIW R24 , 1
000300 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
000301 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000302 91e9      	ld   r30,y+
000303 91f9      	ld   r31,y+
000304 9630      	adiw r30,0
000305 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000306 ec8d     +LDI R24 , LOW ( 0xACD )
000307 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000308 9701     +SBIW R24 , 1
000309 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
00030a 95a8      	wdr
00030b 9731      	sbiw r30,1
00030c f7c9      	brne __delay_ms0
                 __delay_ms1:
00030d 9508      	ret
                 
                 __SUBD12:
00030e 1bea      	SUB  R30,R26
00030f 0bfb      	SBC  R31,R27
000310 0b68      	SBC  R22,R24
000311 0b79      	SBC  R23,R25
000312 9508      	RET
                 
                 __SUBD21:
000313 1bae      	SUB  R26,R30
000314 0bbf      	SBC  R27,R31
000315 0b86      	SBC  R24,R22
000316 0b97      	SBC  R25,R23
000317 9508      	RET
                 
                 __ANEGD1:
000318 95f0      	COM  R31
000319 9560      	COM  R22
00031a 9570      	COM  R23
00031b 95e1      	NEG  R30
00031c 4fff      	SBCI R31,-1
00031d 4f6f      	SBCI R22,-1
00031e 4f7f      	SBCI R23,-1
00031f 9508      	RET
                 
                 __MULD12U:
000320 9f7a      	MUL  R23,R26
000321 2d70      	MOV  R23,R0
000322 9f6b      	MUL  R22,R27
000323 0d70      	ADD  R23,R0
000324 9ff8      	MUL  R31,R24
000325 0d70      	ADD  R23,R0
000326 9fe9      	MUL  R30,R25
000327 0d70      	ADD  R23,R0
000328 9f6a      	MUL  R22,R26
000329 2d60      	MOV  R22,R0
00032a 0d71      	ADD  R23,R1
00032b 9ffb      	MUL  R31,R27
00032c 0d60      	ADD  R22,R0
00032d 1d71      	ADC  R23,R1
00032e 9fe8      	MUL  R30,R24
00032f 0d60      	ADD  R22,R0
000330 1d71      	ADC  R23,R1
000331 2788      	CLR  R24
000332 9ffa      	MUL  R31,R26
000333 2df0      	MOV  R31,R0
000334 0d61      	ADD  R22,R1
000335 1f78      	ADC  R23,R24
000336 9feb      	MUL  R30,R27
000337 0df0      	ADD  R31,R0
000338 1d61      	ADC  R22,R1
000339 1f78      	ADC  R23,R24
00033a 9fea      	MUL  R30,R26
00033b 2de0      	MOV  R30,R0
00033c 0df1      	ADD  R31,R1
00033d 1f68      	ADC  R22,R24
00033e 1f78      	ADC  R23,R24
00033f 9508      	RET
                 
                 __MULD12:
000340 d02e      	RCALL __CHKSIGND
000341 dfde      	RCALL __MULD12U
000342 f40e      	BRTC __MULD121
000343 dfd4      	RCALL __ANEGD1
                 __MULD121:
000344 9508      	RET
                 
                 __DIVD21U:
000345 933f      	PUSH R19
000346 934f      	PUSH R20
000347 935f      	PUSH R21
000348 2400      	CLR  R0
000349 2411      	CLR  R1
00034a 2744      	CLR  R20
00034b 2755      	CLR  R21
00034c e230      	LDI  R19,32
                 __DIVD21U1:
00034d 0faa      	LSL  R26
00034e 1fbb      	ROL  R27
00034f 1f88      	ROL  R24
000350 1f99      	ROL  R25
000351 1c00      	ROL  R0
000352 1c11      	ROL  R1
000353 1f44      	ROL  R20
000354 1f55      	ROL  R21
000355 1a0e      	SUB  R0,R30
000356 0a1f      	SBC  R1,R31
000357 0b46      	SBC  R20,R22
000358 0b57      	SBC  R21,R23
000359 f428      	BRCC __DIVD21U2
00035a 0e0e      	ADD  R0,R30
00035b 1e1f      	ADC  R1,R31
00035c 1f46      	ADC  R20,R22
00035d 1f57      	ADC  R21,R23
00035e c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00035f 60a1      	SBR  R26,1
                 __DIVD21U3:
000360 953a      	DEC  R19
000361 f759      	BRNE __DIVD21U1
000362 01fd      	MOVW R30,R26
000363 01bc      	MOVW R22,R24
000364 01d0      	MOVW R26,R0
000365 01ca      	MOVW R24,R20
000366 915f      	POP  R21
000367 914f      	POP  R20
000368 913f      	POP  R19
000369 9508      	RET
                 
                 __DIVD21:
00036a d004      	RCALL __CHKSIGND
00036b dfd9      	RCALL __DIVD21U
00036c f40e      	BRTC __DIVD211
00036d dfaa      	RCALL __ANEGD1
                 __DIVD211:
00036e 9508      	RET
                 
                 __CHKSIGND:
00036f 94e8      	CLT
000370 ff77      	SBRS R23,7
000371 c002      	RJMP __CHKSD1
000372 dfa5      	RCALL __ANEGD1
000373 9468      	SET
                 __CHKSD1:
000374 ff97      	SBRS R25,7
000375 c00b      	RJMP __CHKSD2
000376 2400      	CLR  R0
000377 95a0      	COM  R26
000378 95b0      	COM  R27
000379 9580      	COM  R24
00037a 9590      	COM  R25
00037b 9611      	ADIW R26,1
00037c 1d80      	ADC  R24,R0
00037d 1d90      	ADC  R25,R0
00037e f800      	BLD  R0,0
00037f 9403      	INC  R0
000380 fa00      	BST  R0,0
                 __CHKSD2:
000381 9508      	RET
                 
                 __PUTD2S0:
000382 83a8      	ST   Y,R26
000383 83b9      	STD  Y+1,R27
000384 838a      	STD  Y+2,R24
000385 839b      	STD  Y+3,R25
000386 9508      	RET
                 
                 __PUTPARD1:
000387 937a      	ST   -Y,R23
000388 936a      	ST   -Y,R22
000389 93fa      	ST   -Y,R31
00038a 93ea      	ST   -Y,R30
00038b 9508      	RET
                 
                 __SWAPD12:
00038c 2e18      	MOV  R1,R24
00038d 2f86      	MOV  R24,R22
00038e 2d61      	MOV  R22,R1
00038f 2e19      	MOV  R1,R25
000390 2f97      	MOV  R25,R23
000391 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000392 2e1b      	MOV  R1,R27
000393 2fbf      	MOV  R27,R31
000394 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000395 2e1a      	MOV  R1,R26
000396 2fae      	MOV  R26,R30
000397 2de1      	MOV  R30,R1
000398 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  25 r1 :  19 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  45 r23:  46 
r24:  55 r25:  32 r26:  45 r27:  30 r28:   6 r29:   1 r30: 248 r31:  65 
x  :   3 y  : 113 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  12 add   :  11 
adiw  :   7 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   4 brmi  :   1 brne  :  13 brpl  :   1 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  37 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :   2 cpc   :  15 cpi   :   8 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   4 jmp   :  37 ld    :  17 ldd   :  38 ldi   : 115 
lds   :  11 lpm   :   9 lsl   :   1 lsr   :   0 mov   :  19 movw  :   7 
mul   :  10 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   0 out   :  46 pop   :  27 push  :  27 rcall :  47 ret   :  24 
reti  :   0 rjmp  :  22 rol   :   7 ror   :   0 sbc   :   9 sbci  :  10 
sbi   :  15 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  37 std   :  25 sts   :  33 sub   :   3 subi  :   6 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000732   1820     22   1842   65536   2.8%
[.dseg] 0x000100 0x000508      0      8      8    4351   0.2%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 5 warnings
