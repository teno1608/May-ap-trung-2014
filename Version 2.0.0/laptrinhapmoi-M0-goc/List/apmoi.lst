
AVRASM ver. 2.1.30  D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm Wed Feb 24 20:36:13 2016

D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1057): warning: Register r5 already defined by the .DEF directive
D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1058): warning: Register r6 already defined by the .DEF directive
D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1059): warning: Register r8 already defined by the .DEF directive
D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1060): warning: Register r4 already defined by the .DEF directive
D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1061): warning: Register r11 already defined by the .DEF directive
D:\may ap trung\LAP TRINH MACH V1\laptrinhapmoi-M0-goc\List\apmoi.asm(1062): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _k=R5
                 	.DEF _demdaotrung=R6
                 	.DEF _sldao=R8
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01d      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c109      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _0x5C:
000013 0000
000014 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
000015 002e      	.DB  0x2E,0x0
                 _0x2000003:
000016 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000017 0004      	.DW  0x04
000018 0006      	.DW  0x06
000019 0026      	.DW  _0x5C*2
                 
00001a 0002      	.DW  0x02
00001b 0184      	.DW  __base_y_G100
00001c 002c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00001d 0000      	.DW  0
                 
                 __RESET:
00001e 94f8      	CLI
00001f 27ee      	CLR  R30
000020 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000021 e0f1      	LDI  R31,1
000022 bffb      	OUT  GICR,R31
000023 bfeb      	OUT  GICR,R30
000024 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000025 e1f8      	LDI  R31,0x18
000026 bdf1      	OUT  WDTCR,R31
000027 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000028 e08d      	LDI  R24,(14-2)+1
000029 e0a2      	LDI  R26,2
00002a 27bb      	CLR  R27
                 __CLEAR_REG:
00002b 93ed      	ST   X+,R30
00002c 958a      	DEC  R24
00002d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000030 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000031 93ed      	ST   X+,R30
000032 9701      	SBIW R24,1
000033 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000034 e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000035 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000036 9185      	LPM  R24,Z+
000037 9195      	LPM  R25,Z+
000038 9700      	SBIW R24,0
000039 f061      	BREQ __GLOBAL_INI_END
00003a 91a5      	LPM  R26,Z+
00003b 91b5      	LPM  R27,Z+
00003c 9005      	LPM  R0,Z+
00003d 9015      	LPM  R1,Z+
00003e 01bf      	MOVW R22,R30
00003f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000040 9005      	LPM  R0,Z+
000041 920d      	ST   X+,R0
000042 9701      	SBIW R24,1
000043 f7e1      	BRNE __GLOBAL_INI_LOOP
000044 01fb      	MOVW R30,R22
000045 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000046 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000047 bfed      	OUT  SPL,R30
000048 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000049 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004c c11d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;eeprom int nhietdodat=370, doamdat=600, timeoff=0 ;
                 ;
                 ;void lcd_putnum (long so,unsigned char x,unsigned char y)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _lcd_putnum:
                 ; 0000 0014    long a, b, c;
                 ; 0000 0015    a = so / 100;
00004d d214      	RCALL SUBOPT_0x0
                 ;	so -> Y+14
                 ;	x -> Y+13
                 ;	y -> Y+12
                 ;	a -> Y+8
                 ;	b -> Y+4
                 ;	c -> Y+0
                 ; 0000 0016    b = (so - 100 * a) / 10;
                 ; 0000 0017    c = so - 100 * a - 10 * b;
00004e 937f      	PUSH R23
00004f 936f      	PUSH R22
000050 93ff      	PUSH R31
000051 93ef      	PUSH R30
000052 d240      	RCALL SUBOPT_0x1
000053 91af      	POP  R26
000054 91bf      	POP  R27
000055 918f      	POP  R24
000056 919f      	POP  R25
000057 d245      	RCALL SUBOPT_0x2
                 ; 0000 0018    lcd_gotoxy (x, y) ;
                 ; 0000 0019    lcd_putchar (a + 48) ;
                 ; 0000 001A    lcd_putchar (b + 48) ;
                 ; 0000 001B    lcd_putsf(".");
                +
000058 e2ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000059 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00005a d251      	RCALL SUBOPT_0x3
00005b d1cb      	RCALL _lcd_putsf
                 ; 0000 001C    lcd_putchar (c + 48) ;
00005c c00b      	RJMP _0x2020002
                 ; 0000 001D }
                 ;
                 ;void lcd_putnum1 (long so,unsigned char x,unsigned char y)
                 ; 0000 0020 {
                 _lcd_putnum1:
                 ; 0000 0021    long a, b, c;
                 ; 0000 0022    a = so / 100;
00005d d204      	RCALL SUBOPT_0x0
                 ;	so -> Y+14
                 ;	x -> Y+13
                 ;	y -> Y+12
                 ;	a -> Y+8
                 ;	b -> Y+4
                 ;	c -> Y+0
                 ; 0000 0023    b = (so - 100 * a) / 10;
                 ; 0000 0024    c = so - 100 * a - 10 * b;
00005e 937f      	PUSH R23
00005f 936f      	PUSH R22
000060 93ff      	PUSH R31
000061 93ef      	PUSH R30
000062 d230      	RCALL SUBOPT_0x1
000063 91af      	POP  R26
000064 91bf      	POP  R27
000065 918f      	POP  R24
000066 919f      	POP  R25
000067 d235      	RCALL SUBOPT_0x2
                 ; 0000 0025    lcd_gotoxy (x, y) ;
                 ; 0000 0026    lcd_putchar (a + 48) ;
                 ; 0000 0027    lcd_putchar (b + 48) ;
                 ; 0000 0028    lcd_putchar (c + 48) ;
                 _0x2020002:
000068 81e8      	LD   R30,Y
000069 5de0      	SUBI R30,-LOW(48)
00006a 93ea      	ST   -Y,R30
00006b d1a8      	RCALL _lcd_putchar
                 ; 0000 0029 }
00006c 9662      	ADIW R28,18
00006d 9508      	RET
                 ;
                 ;#define data PIND.0
                 ;
                 ;long num, i, doamh, doaml, nhietdoh, nhietdol, a, nhietdo, doam;
                 ;unsigned char k;
                 ;
                 ;
                 ;void read_am2301()
                 ; 0000 0032      {
                 _read_am2301:
                 ; 0000 0033      doamh=doaml=nhietdoh=nhietdol=0;
                +
00006e e0e0     +LDI R30 , LOW ( 0x0 )
00006f e0f0     +LDI R31 , HIGH ( 0x0 )
000070 e060     +LDI R22 , BYTE3 ( 0x0 )
000071 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000072 d23c      	RCALL SUBOPT_0x4
000073 d244      	RCALL SUBOPT_0x5
000074 d24c      	RCALL SUBOPT_0x6
000075 d254      	RCALL SUBOPT_0x7
                 ; 0000 0034      a=128;
000076 d25c      	RCALL SUBOPT_0x8
                 ; 0000 0035      DDRD=0xff;
000077 efef      	LDI  R30,LOW(255)
000078 bbe1      	OUT  0x11,R30
                 ; 0000 0036      PORTD.0=0;
000079 9890      	CBI  0x12,0
                 ; 0000 0037      delay_us(1000);
                +
00007a ea80     +LDI R24 , LOW ( 4000 )
00007b e09f     +LDI R25 , HIGH ( 4000 )
                +__DELAY_USW_LOOP :
00007c 9701     +SBIW R24 , 1
00007d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 4000
                 ; 0000 0038      PORTD.0=1;
00007e 9a90      	SBI  0x12,0
                 ; 0000 0039      delay_us(30);
                +
00007f ea80     +LDI R24 , LOW ( 160 )
                +__DELAY_USB_LOOP :
000080 958a     +DEC R24
000081 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 160
                 ; 0000 003A      PORTD.0=0;
000082 9890      	CBI  0x12,0
                 ; 0000 003B      DDRD=0b11111110;
000083 efee      	LDI  R30,LOW(254)
000084 bbe1      	OUT  0x11,R30
                 ; 0000 003C      while(data==0)
                 _0x9:
000085 9b80      	SBIS 0x10,0
                 ; 0000 003D           {
                 ; 0000 003E           }
000086 cffe      	RJMP _0x9
                 ; 0000 003F      while(data==1)
                 _0xC:
000087 9980      	SBIC 0x10,0
                 ; 0000 0040           {
                 ; 0000 0041           }
000088 cffe      	RJMP _0xC
                 ; 0000 0042 
                 ; 0000 0043      while(data==0)
                 _0xF:
000089 9b80      	SBIS 0x10,0
                 ; 0000 0044           {
                 ; 0000 0045           }
00008a cffe      	RJMP _0xF
                 ; 0000 0046      a=128;
00008b d247      	RCALL SUBOPT_0x8
                 ; 0000 0047      for (i=0;i<8;i++)
00008c d253      	RCALL SUBOPT_0x9
                 _0x13:
00008d d25c      	RCALL SUBOPT_0xA
00008e f4bc      	BRGE _0x14
                 ; 0000 0048           {
                 ; 0000 0049           TCNT0=0x00;
00008f d26a      	RCALL SUBOPT_0xB
                 ; 0000 004A           TCCR0=0x02;
000090 d26c      	RCALL SUBOPT_0xC
                 ; 0000 004B           while(data==1)
                 _0x15:
000091 9980      	SBIC 0x10,0
                 ; 0000 004C                {
                 ; 0000 004D                }
000092 cffe      	RJMP _0x15
                 ; 0000 004E           if (TCNT0 > 96) doamh = doamh + a ;
000093 d26c      	RCALL SUBOPT_0xD
000094 f058      	BRLO _0x18
000095 d26d      	RCALL SUBOPT_0xE
000096 91a0 0164 	LDS  R26,_doamh
000098 91b0 0165 	LDS  R27,_doamh+1
00009a 9180 0166 	LDS  R24,_doamh+2
00009c 9190 0167 	LDS  R25,_doamh+3
00009e d2d4      	RCALL __ADDD12
00009f d22a      	RCALL SUBOPT_0x7
                 ; 0000 004F           a=a/2;
                 _0x18:
0000a0 d26b      	RCALL SUBOPT_0xF
                 ; 0000 0050           TCNT0=0x00;
                 ; 0000 0051           TCCR0=0x00;
0000a1 d280      	RCALL SUBOPT_0x10
                 ; 0000 0052           while (data==0)
                 _0x19:
0000a2 9b80      	SBIS 0x10,0
                 ; 0000 0053                {
                 ; 0000 0054                }
0000a3 cffe      	RJMP _0x19
                 ; 0000 0055           }
0000a4 d280      	RCALL SUBOPT_0x11
0000a5 cfe7      	RJMP _0x13
                 _0x14:
                 ; 0000 0056      a=128;
0000a6 d22c      	RCALL SUBOPT_0x8
                 ; 0000 0057      for (i=0;i<8;i++)
0000a7 d238      	RCALL SUBOPT_0x9
                 _0x1D:
0000a8 d241      	RCALL SUBOPT_0xA
0000a9 f47c      	BRGE _0x1E
                 ; 0000 0058           {
                 ; 0000 0059           TCNT0=0x00;
0000aa d24f      	RCALL SUBOPT_0xB
                 ; 0000 005A           TCCR0=0x02;
0000ab d251      	RCALL SUBOPT_0xC
                 ; 0000 005B           while(data==1)
                 _0x1F:
0000ac 9980      	SBIC 0x10,0
                 ; 0000 005C                {
                 ; 0000 005D                }
0000ad cffe      	RJMP _0x1F
                 ; 0000 005E           if (TCNT0 > 96) doaml = doaml + a ;
0000ae d251      	RCALL SUBOPT_0xD
0000af f018      	BRLO _0x22
0000b0 d252      	RCALL SUBOPT_0xE
0000b1 d27c      	RCALL SUBOPT_0x12
0000b2 d20e      	RCALL SUBOPT_0x6
                 ; 0000 005F           a=a/2;
                 _0x22:
0000b3 d258      	RCALL SUBOPT_0xF
                 ; 0000 0060           TCNT0=0x00;
                 ; 0000 0061           TCCR0=0x00;
0000b4 d26d      	RCALL SUBOPT_0x10
                 ; 0000 0062           while (data==0)
                 _0x23:
0000b5 9b80      	SBIS 0x10,0
                 ; 0000 0063                {
                 ; 0000 0064                }
0000b6 cffe      	RJMP _0x23
                 ; 0000 0065           }
0000b7 d26d      	RCALL SUBOPT_0x11
0000b8 cfef      	RJMP _0x1D
                 _0x1E:
                 ; 0000 0066      a=128;
0000b9 d219      	RCALL SUBOPT_0x8
                 ; 0000 0067      for (i=0;i<8;i++)
0000ba d225      	RCALL SUBOPT_0x9
                 _0x27:
0000bb d22e      	RCALL SUBOPT_0xA
0000bc f4bc      	BRGE _0x28
                 ; 0000 0068           {
                 ; 0000 0069           TCNT0=0x00;
0000bd d23c      	RCALL SUBOPT_0xB
                 ; 0000 006A           TCCR0=0x02;
0000be d23e      	RCALL SUBOPT_0xC
                 ; 0000 006B           while(data==1)
                 _0x29:
0000bf 9980      	SBIC 0x10,0
                 ; 0000 006C                {
                 ; 0000 006D                }
0000c0 cffe      	RJMP _0x29
                 ; 0000 006E           if (TCNT0 > 96) nhietdoh = nhietdoh + a ;
0000c1 d23e      	RCALL SUBOPT_0xD
0000c2 f058      	BRLO _0x2C
0000c3 d23f      	RCALL SUBOPT_0xE
0000c4 91a0 016c 	LDS  R26,_nhietdoh
0000c6 91b0 016d 	LDS  R27,_nhietdoh+1
0000c8 9180 016e 	LDS  R24,_nhietdoh+2
0000ca 9190 016f 	LDS  R25,_nhietdoh+3
0000cc d2a6      	RCALL __ADDD12
0000cd d1ea      	RCALL SUBOPT_0x5
                 ; 0000 006F           a=a/2;
                 _0x2C:
0000ce d23d      	RCALL SUBOPT_0xF
                 ; 0000 0070           TCNT0=0x00;
                 ; 0000 0071           TCCR0=0x00;
0000cf d252      	RCALL SUBOPT_0x10
                 ; 0000 0072           while (data==0)
                 _0x2D:
0000d0 9b80      	SBIS 0x10,0
                 ; 0000 0073                {
                 ; 0000 0074                }
0000d1 cffe      	RJMP _0x2D
                 ; 0000 0075           }
0000d2 d252      	RCALL SUBOPT_0x11
0000d3 cfe7      	RJMP _0x27
                 _0x28:
                 ; 0000 0076      a=128;
0000d4 d1fe      	RCALL SUBOPT_0x8
                 ; 0000 0077      for (i=0;i<8;i++)
0000d5 d20a      	RCALL SUBOPT_0x9
                 _0x31:
0000d6 d213      	RCALL SUBOPT_0xA
0000d7 f47c      	BRGE _0x32
                 ; 0000 0078           {
                 ; 0000 0079           TCNT0=0x00;
0000d8 d221      	RCALL SUBOPT_0xB
                 ; 0000 007A           TCCR0=0x02;
0000d9 d223      	RCALL SUBOPT_0xC
                 ; 0000 007B           while(data==1)
                 _0x33:
0000da 9980      	SBIC 0x10,0
                 ; 0000 007C                {
                 ; 0000 007D                }
0000db cffe      	RJMP _0x33
                 ; 0000 007E           if (TCNT0 > 96) nhietdol = nhietdol + a ;
0000dc d223      	RCALL SUBOPT_0xD
0000dd f018      	BRLO _0x36
0000de d224      	RCALL SUBOPT_0xE
0000df d258      	RCALL SUBOPT_0x13
0000e0 d1ce      	RCALL SUBOPT_0x4
                 ; 0000 007F           a=a/2;
                 _0x36:
0000e1 d22a      	RCALL SUBOPT_0xF
                 ; 0000 0080           TCNT0=0x00;
                 ; 0000 0081           TCCR0=0x00;
0000e2 d23f      	RCALL SUBOPT_0x10
                 ; 0000 0082           while (data==0)
                 _0x37:
0000e3 9b80      	SBIS 0x10,0
                 ; 0000 0083                {
                 ; 0000 0084                }
0000e4 cffe      	RJMP _0x37
                 ; 0000 0085           }
0000e5 d23f      	RCALL SUBOPT_0x11
0000e6 cfef      	RJMP _0x31
                 _0x32:
                 ; 0000 0086      a=128;
0000e7 d1eb      	RCALL SUBOPT_0x8
                 ; 0000 0087 
                 ; 0000 0088      nhietdo = nhietdoh*256 + nhietdol;
0000e8 91e0 016c 	LDS  R30,_nhietdoh
0000ea 91f0 016d 	LDS  R31,_nhietdoh+1
0000ec 9160 016e 	LDS  R22,_nhietdoh+2
0000ee 9170 016f 	LDS  R23,_nhietdoh+3
0000f0 d251      	RCALL SUBOPT_0x14
0000f1 d246      	RCALL SUBOPT_0x13
0000f2 93e0 0178 	STS  _nhietdo,R30
0000f4 93f0 0179 	STS  _nhietdo+1,R31
0000f6 9360 017a 	STS  _nhietdo+2,R22
0000f8 9370 017b 	STS  _nhietdo+3,R23
                 ; 0000 0089      doam = doamh*256 + doaml;
0000fa 91e0 0164 	LDS  R30,_doamh
0000fc 91f0 0165 	LDS  R31,_doamh+1
0000fe 9160 0166 	LDS  R22,_doamh+2
000100 9170 0167 	LDS  R23,_doamh+3
000102 d23f      	RCALL SUBOPT_0x14
000103 d22a      	RCALL SUBOPT_0x12
000104 93e0 017c 	STS  _doam,R30
000106 93f0 017d 	STS  _doam+1,R31
000108 9360 017e 	STS  _doam+2,R22
00010a 9370 017f 	STS  _doam+3,R23
                 ; 0000 008A      /*
                 ; 0000 008B      lcd_gotoxy(0,0);
                 ; 0000 008C      lcd_putsf("Nhiet Do: ");
                 ; 0000 008D      lcd_putnum(nhietdo,10,0);
                 ; 0000 008E      lcd_gotoxy(0,1);
                 ; 0000 008F      lcd_putsf("Do Am: ");
                 ; 0000 0090      lcd_putnum(doam,10,1);
                 ; 0000 0091      */
                 ; 0000 0092      DDRD=0xff;
00010c efef      	LDI  R30,LOW(255)
00010d bbe1      	OUT  0x11,R30
                 ; 0000 0093      PORTD.0=1;
00010e 9a90      	SBI  0x12,0
                 ; 0000 0094      }
00010f 9508      	RET
                 ;
                 ;#define role1 PORTC.2
                 ;#define role2 PORTC.3
                 ;#define role3 PORTC.4
                 ;#define role4 PORTC.5
                 ;
                 ;#define up1 PINB.0
                 ;#define down1 PINC.0
                 ;#define up2 PINB.1
                 ;#define down2 PINC.1
                 ;
                 ;
                 ;int demdaotrung=0, sldao=0;
                 ;long time1day=0;
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;// Interrupt 1 second <<<
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00A7 {
                 _timer1_compa_isr:
000110 920a      	ST   -Y,R0
000111 921a      	ST   -Y,R1
000112 92fa      	ST   -Y,R15
000113 936a      	ST   -Y,R22
000114 937a      	ST   -Y,R23
000115 938a      	ST   -Y,R24
000116 939a      	ST   -Y,R25
000117 93aa      	ST   -Y,R26
000118 93ba      	ST   -Y,R27
000119 93ea      	ST   -Y,R30
00011a 93fa      	ST   -Y,R31
00011b b7ef      	IN   R30,SREG
00011c 93ea      	ST   -Y,R30
                 ; 0000 00A8 // Place your code here
                 ; 0000 00A9 demdaotrung++;
00011d 01f3      	MOVW R30,R6
00011e 9631      	ADIW R30,1
00011f 013f      	MOVW R6,R30
                 ; 0000 00AA time1day++;
000120 e8a0      	LDI  R26,LOW(_time1day)
000121 e0b1      	LDI  R27,HIGH(_time1day)
000122 d2ce      	RCALL __GETD1P_INC
                +
000123 5fef     +SUBI R30 , LOW ( - 1 )
000124 4fff     +SBCI R31 , HIGH ( - 1 )
000125 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000126 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000127 d2ce      	RCALL __PUTDP1_DEC
                 ; 0000 00AB if (time1day == 86400)
000128 91a0 0180 	LDS  R26,_time1day
00012a 91b0 0181 	LDS  R27,_time1day+1
00012c 9180 0182 	LDS  R24,_time1day+2
00012e 9190 0183 	LDS  R25,_time1day+3
                +
000130 38a0     +CPI R26 , LOW ( 0x15180 )
000131 e5e1     +LDI R30 , HIGH ( 0x15180 )
000132 07be     +CPC R27 , R30
000133 e0e1     +LDI R30 , BYTE3 ( 0x15180 )
000134 078e     +CPC R24 , R30
000135 e0e0     +LDI R30 , BYTE4 ( 0x15180 )
000136 079e     +CPC R25 , R30
                 	__CPD2N 0x15180
000137 f431      	BRNE _0x3C
                 ; 0000 00AC     {
                 ; 0000 00AD     timeoff++;
000138 e0a4      	LDI  R26,LOW(_timeoff)
000139 e0b0      	LDI  R27,HIGH(_timeoff)
00013a d2d7      	RCALL __EEPROMRDW
00013b 9631      	ADIW R30,1
00013c d2e5      	RCALL __EEPROMWRW
00013d 9731      	SBIW R30,1
                 ; 0000 00AE     }
                 ; 0000 00AF while (timeoff == 1000)
                 _0x3C:
                 _0x3D:
00013e e0a4      	LDI  R26,LOW(_timeoff)
00013f e0b0      	LDI  R27,HIGH(_timeoff)
000140 d2d1      	RCALL __EEPROMRDW
000141 3ee8      	CPI  R30,LOW(0x3E8)
000142 e0a3      	LDI  R26,HIGH(0x3E8)
000143 07fa      	CPC  R31,R26
000144 f429      	BRNE _0x3F
                 ; 0000 00B0     {
                 ; 0000 00B1      #asm("cli")
000145 94f8      	cli
                 ; 0000 00B2      lcd_clear();
000146 d0c1      	RCALL _lcd_clear
                 ; 0000 00B3      PORTC=0xff;
000147 efef      	LDI  R30,LOW(255)
000148 bbe5      	OUT  0x15,R30
                 ; 0000 00B4     }
000149 cff4      	RJMP _0x3D
                 _0x3F:
                 ; 0000 00B5 
                 ; 0000 00B6 if (demdaotrung == 7193)
00014a e1e9      	LDI  R30,LOW(7193)
00014b e1fc      	LDI  R31,HIGH(7193)
00014c 15e6      	CP   R30,R6
00014d 05f7      	CPC  R31,R7
00014e f421      	BRNE _0x40
                 ; 0000 00B7     {
                 ; 0000 00B8     role3=0;
00014f 98ac      	CBI  0x15,4
                 ; 0000 00B9     sldao++;
000150 01f4      	MOVW R30,R8
000151 9631      	ADIW R30,1
000152 014f      	MOVW R8,R30
                 ; 0000 00BA     }
                 ; 0000 00BB if (demdaotrung == 7200)
                 _0x40:
000153 e2e0      	LDI  R30,LOW(7200)
000154 e1fc      	LDI  R31,HIGH(7200)
000155 15e6      	CP   R30,R6
000156 05f7      	CPC  R31,R7
000157 f419      	BRNE _0x43
                 ; 0000 00BC     {
                 ; 0000 00BD     demdaotrung =0;
000158 2466      	CLR  R6
000159 2477      	CLR  R7
                 ; 0000 00BE     role3=1;
00015a 9aac      	SBI  0x15,4
                 ; 0000 00BF     }
                 ; 0000 00C0 
                 ; 0000 00C1 read_am2301();
                 _0x43:
00015b df12      	RCALL _read_am2301
                 ; 0000 00C2 
                 ; 0000 00C3 }
00015c 91e9      	LD   R30,Y+
00015d bfef      	OUT  SREG,R30
00015e 91f9      	LD   R31,Y+
00015f 91e9      	LD   R30,Y+
000160 91b9      	LD   R27,Y+
000161 91a9      	LD   R26,Y+
000162 9199      	LD   R25,Y+
000163 9189      	LD   R24,Y+
000164 9179      	LD   R23,Y+
000165 9169      	LD   R22,Y+
000166 90f9      	LD   R15,Y+
000167 9019      	LD   R1,Y+
000168 9009      	LD   R0,Y+
000169 9518      	RETI
                 ;
                 ;
                 ;void read_key()
                 ; 0000 00C7     {
                 ; 0000 00C8 
                 ; 0000 00C9     while (up1==0)
                 ; 0000 00CA         {
                 ; 0000 00CB         while (down2==0)
                 ; 0000 00CC             {
                 ; 0000 00CD             nhietdodat=370;
                 ; 0000 00CE             doamdat=600;
                 ; 0000 00CF             }
                 ; 0000 00D0         nhietdodat++;
                 ; 0000 00D1         lcd_putnum(nhietdodat,7,0);
                 ; 0000 00D2         delay_ms(300);
                 ; 0000 00D3         }
                 ; 0000 00D4     while (down1==0)
                 ; 0000 00D5         {
                 ; 0000 00D6         nhietdodat--;
                 ; 0000 00D7         lcd_putnum(nhietdodat,7,0);
                 ; 0000 00D8         delay_ms(300);
                 ; 0000 00D9         }
                 ; 0000 00DA 
                 ; 0000 00DB     while (up2==0)
                 ; 0000 00DC         {
                 ; 0000 00DD         while (down1==0)
                 ; 0000 00DE             {
                 ; 0000 00DF             timeoff=0;
                 ; 0000 00E0             }
                 ; 0000 00E1         doamdat++;
                 ; 0000 00E2         lcd_putnum(doamdat,7,1);
                 ; 0000 00E3         delay_ms(300);
                 ; 0000 00E4         }
                 ; 0000 00E5     while (down2==0)
                 ; 0000 00E6         {
                 ; 0000 00E7         doamdat--;
                 ; 0000 00E8         lcd_putnum(doamdat,7,1);
                 ; 0000 00E9         delay_ms(300);
                 ; 0000 00EA         }
                 ; 0000 00EB     }
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00EF {
                 _main:
                 ; 0000 00F0 // Declare your local variables here
                 ; 0000 00F1 
                 ; 0000 00F2 // Input/Output Ports initialization
                 ; 0000 00F3 // Port B initialization
                 ; 0000 00F4 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00F5 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00F6 PORTB=0xff;
00016a efef      	LDI  R30,LOW(255)
00016b bbe8      	OUT  0x18,R30
                 ; 0000 00F7 DDRB=0x00;
00016c e0e0      	LDI  R30,LOW(0)
00016d bbe7      	OUT  0x17,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Port C initialization
                 ; 0000 00FA // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00FB // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00FC PORTC=0xff;
00016e efef      	LDI  R30,LOW(255)
00016f bbe5      	OUT  0x15,R30
                 ; 0000 00FD DDRC=0b11111100;
000170 efec      	LDI  R30,LOW(252)
000171 bbe4      	OUT  0x14,R30
                 ; 0000 00FE 
                 ; 0000 00FF // Port D initialization
                 ; 0000 0100 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0101 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0102 PORTD=0x00;
000172 e0e0      	LDI  R30,LOW(0)
000173 bbe2      	OUT  0x12,R30
                 ; 0000 0103 DDRD=0x00;
000174 bbe1      	OUT  0x11,R30
                 ; 0000 0104 
                 ; 0000 0105 // Timer/Counter 0 initialization
                 ; 0000 0106 // Clock source: System Clock
                 ; 0000 0107 // Clock value: Timer 0 Stopped
                 ; 0000 0108 TCCR0=0x00;
000175 d1ac      	RCALL SUBOPT_0x10
                 ; 0000 0109 TCNT0=0x00;
000176 d183      	RCALL SUBOPT_0xB
                 ; 0000 010A 
                 ; 0000 010B // Timer/Counter 1 initialization
                 ; 0000 010C // Clock source: System Clock
                 ; 0000 010D // Clock value: 15.625 kHz
                 ; 0000 010E // Mode: CTC top=OCR1A
                 ; 0000 010F // OC1A output: Discon.
                 ; 0000 0110 // OC1B output: Discon.
                 ; 0000 0111 // Noise Canceler: Off
                 ; 0000 0112 // Input Capture on Falling Edge
                 ; 0000 0113 // Timer1 Overflow Interrupt: Off
                 ; 0000 0114 // Input Capture Interrupt: Off
                 ; 0000 0115 // Compare A Match Interrupt: On
                 ; 0000 0116 // Compare B Match Interrupt: Off
                 ; 0000 0117 TCCR1A=0x00;
000177 e0e0      	LDI  R30,LOW(0)
000178 bdef      	OUT  0x2F,R30
                 ; 0000 0118 TCCR1B=0x0D;
000179 e0ed      	LDI  R30,LOW(13)
00017a bdee      	OUT  0x2E,R30
                 ; 0000 0119 TCNT1H=0x00;
00017b e0e0      	LDI  R30,LOW(0)
00017c bded      	OUT  0x2D,R30
                 ; 0000 011A TCNT1L=0x00;
00017d bdec      	OUT  0x2C,R30
                 ; 0000 011B ICR1H=0x00;
00017e bde7      	OUT  0x27,R30
                 ; 0000 011C ICR1L=0x00;
00017f bde6      	OUT  0x26,R30
                 ; 0000 011D OCR1AH=0x3D;
000180 e3ed      	LDI  R30,LOW(61)
000181 bdeb      	OUT  0x2B,R30
                 ; 0000 011E OCR1AL=0x09;
000182 e0e9      	LDI  R30,LOW(9)
000183 bdea      	OUT  0x2A,R30
                 ; 0000 011F OCR1BH=0x00;
000184 e0e0      	LDI  R30,LOW(0)
000185 bde9      	OUT  0x29,R30
                 ; 0000 0120 OCR1BL=0x00;
000186 bde8      	OUT  0x28,R30
                 ; 0000 0121 
                 ; 0000 0122 // Timer/Counter 2 initialization
                 ; 0000 0123 // Clock source: System Clock
                 ; 0000 0124 // Clock value: Timer2 Stopped
                 ; 0000 0125 // Mode: Normal top=0xFF
                 ; 0000 0126 // OC2 output: Disconnected
                 ; 0000 0127 ASSR=0x00;
000187 bde2      	OUT  0x22,R30
                 ; 0000 0128 TCCR2=0x00;
000188 bde5      	OUT  0x25,R30
                 ; 0000 0129 TCNT2=0x00;
000189 bde4      	OUT  0x24,R30
                 ; 0000 012A OCR2=0x00;
00018a bde3      	OUT  0x23,R30
                 ; 0000 012B 
                 ; 0000 012C // External Interrupt(s) initialization
                 ; 0000 012D // INT0: Off
                 ; 0000 012E // INT1: Off
                 ; 0000 012F MCUCR=0x00;
00018b bfe5      	OUT  0x35,R30
                 ; 0000 0130 
                 ; 0000 0131 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0132 TIMSK=0x10;
00018c e1e0      	LDI  R30,LOW(16)
00018d bfe9      	OUT  0x39,R30
                 ; 0000 0133 
                 ; 0000 0134 // USART initialization
                 ; 0000 0135 // USART disabled
                 ; 0000 0136 UCSRB=0x00;
00018e e0e0      	LDI  R30,LOW(0)
00018f b9ea      	OUT  0xA,R30
                 ; 0000 0137 
                 ; 0000 0138 // Analog Comparator initialization
                 ; 0000 0139 // Analog Comparator: Off
                 ; 0000 013A // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 013B ACSR=0x80;
000190 e8e0      	LDI  R30,LOW(128)
000191 b9e8      	OUT  0x8,R30
                 ; 0000 013C SFIOR=0x00;
000192 e0e0      	LDI  R30,LOW(0)
000193 bfe0      	OUT  0x30,R30
                 ; 0000 013D 
                 ; 0000 013E // ADC initialization
                 ; 0000 013F // ADC disabled
                 ; 0000 0140 ADCSRA=0x00;
000194 b9e6      	OUT  0x6,R30
                 ; 0000 0141 
                 ; 0000 0142 // SPI initialization
                 ; 0000 0143 // SPI disabled
                 ; 0000 0144 SPCR=0x00;
000195 b9ed      	OUT  0xD,R30
                 ; 0000 0145 
                 ; 0000 0146 // TWI initialization
                 ; 0000 0147 // TWI disabled
                 ; 0000 0148 TWCR=0x00;
000196 bfe6      	OUT  0x36,R30
                 ; 0000 0149 
                 ; 0000 014A // Alphanumeric LCD initialization
                 ; 0000 014B // Connections specified in the
                 ; 0000 014C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 014D // RS - PORTD Bit 7
                 ; 0000 014E // RD - PORTD Bit 6
                 ; 0000 014F // EN - PORTD Bit 5
                 ; 0000 0150 // D4 - PORTD Bit 4
                 ; 0000 0151 // D5 - PORTD Bit 3
                 ; 0000 0152 // D6 - PORTD Bit 2
                 ; 0000 0153 // D7 - PORTD Bit 1
                 ; 0000 0154 // Characters/line: 16
                 ; 0000 0155 lcd_init(16);
000197 e1e0      	LDI  R30,LOW(16)
000198 93ea      	ST   -Y,R30
000199 d09e      	RCALL _lcd_init
                 ; 0000 0156 /*
                 ; 0000 0157 lcd_putsf("Start System.....");
                 ; 0000 0158 lcd_gotoxy(0,1);
                 ; 0000 0159 lcd_putsf("> ");
                 ; 0000 015A delay_ms(1000);
                 ; 0000 015B lcd_putsf("> ");
                 ; 0000 015C delay_ms(500);
                 ; 0000 015D lcd_putsf("> ");
                 ; 0000 015E delay_ms(500);
                 ; 0000 015F lcd_putsf("> ");
                 ; 0000 0160 delay_ms(500);
                 ; 0000 0161 lcd_putsf("> ");
                 ; 0000 0162 delay_ms(500);
                 ; 0000 0163 lcd_putsf("> ");
                 ; 0000 0164 delay_ms(500);
                 ; 0000 0165 lcd_putsf("> ");
                 ; 0000 0166 delay_ms(500);
                 ; 0000 0167 lcd_putsf("> ");
                 ; 0000 0168 delay_ms(1000);
                 ; 0000 0169 lcd_clear();
                 ; 0000 016A */
                 ; 0000 016B // Global enable interrupts
                 ; 0000 016C #asm("sei")
00019a 9478      	sei
                 ; 0000 016D 
                 ; 0000 016E while (1)
                 _0x58:
                 ; 0000 016F       {
                 ; 0000 0170       // Place your code here
                 ; 0000 0171         //read_key();
                 ; 0000 0172         lcd_gotoxy(0,0);
00019b d1ac      	RCALL SUBOPT_0x15
00019c d1ab      	RCALL SUBOPT_0x15
00019d d05e      	RCALL _lcd_gotoxy
                 ; 0000 0173 
                 ; 0000 0174         lcd_putnum(nhietdo,1,0);
00019e 91e0 0178 	LDS  R30,_nhietdo
0001a0 91f0 0179 	LDS  R31,_nhietdo+1
0001a2 9160 017a 	LDS  R22,_nhietdo+2
0001a4 9170 017b 	LDS  R23,_nhietdo+3
0001a6 d259      	RCALL __PUTPARD1
0001a7 d1a3      	RCALL SUBOPT_0x16
0001a8 d19f      	RCALL SUBOPT_0x15
0001a9 dea3      	RCALL _lcd_putnum
                 ; 0000 0175         lcd_putnum(nhietdodat,7,0);
0001aa e0a0      	LDI  R26,LOW(_nhietdodat)
0001ab e0b0      	LDI  R27,HIGH(_nhietdodat)
0001ac d1a1      	RCALL SUBOPT_0x17
0001ad d19a      	RCALL SUBOPT_0x15
0001ae de9e      	RCALL _lcd_putnum
                 ; 0000 0176         lcd_gotoxy(0,1);
0001af d198      	RCALL SUBOPT_0x15
0001b0 d19a      	RCALL SUBOPT_0x16
0001b1 d04a      	RCALL _lcd_gotoxy
                 ; 0000 0177 
                 ; 0000 0178         lcd_putnum(doam,1,1);
0001b2 91e0 017c 	LDS  R30,_doam
0001b4 91f0 017d 	LDS  R31,_doam+1
0001b6 9160 017e 	LDS  R22,_doam+2
0001b8 9170 017f 	LDS  R23,_doam+3
0001ba d245      	RCALL __PUTPARD1
0001bb d18f      	RCALL SUBOPT_0x16
0001bc d18e      	RCALL SUBOPT_0x16
0001bd de8f      	RCALL _lcd_putnum
                 ; 0000 0179         lcd_putnum(doamdat,7,1);
0001be e0a2      	LDI  R26,LOW(_doamdat)
0001bf e0b0      	LDI  R27,HIGH(_doamdat)
0001c0 d18d      	RCALL SUBOPT_0x17
0001c1 d189      	RCALL SUBOPT_0x16
0001c2 de8a      	RCALL _lcd_putnum
                 ; 0000 017A         lcd_putnum1(sldao,13,0);
0001c3 01f4      	MOVW R30,R8
0001c4 d1c5      	RCALL __CWD1
0001c5 d23a      	RCALL __PUTPARD1
0001c6 e0ed      	LDI  R30,LOW(13)
0001c7 93ea      	ST   -Y,R30
0001c8 d17f      	RCALL SUBOPT_0x15
0001c9 de93      	RCALL _lcd_putnum1
                 ; 0000 017B       /*
                 ; 0000 017C       if ( nhietdo < nhietdodat-5 ) role1=0;
                 ; 0000 017D       if ( nhietdo > nhietdodat+5 ) role1=1;
                 ; 0000 017E       if ( doam < doamdat-20 ) role2=0;
                 ; 0000 017F       if ( doam > doamdat+20 ) role2=1;
                 ; 0000 0180       if ( (nhietdo < 345)|(doam < 500) ) role4=0; else role4=1;
                 ; 0000 0181       */
                 ; 0000 0182       }
0001ca cfd0      	RJMP _0x58
                 ; 0000 0183 }
                 _0x5B:
0001cb cfff      	RJMP _0x5B
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0001cc 81e8      	LD   R30,Y
0001cd 71e0      	ANDI R30,LOW(0x10)
0001ce f011      	BREQ _0x2000004
0001cf 9a94      	SBI  0x12,4
0001d0 c001      	RJMP _0x2000005
                 _0x2000004:
0001d1 9894      	CBI  0x12,4
                 _0x2000005:
0001d2 81e8      	LD   R30,Y
0001d3 72e0      	ANDI R30,LOW(0x20)
0001d4 f011      	BREQ _0x2000006
0001d5 9a93      	SBI  0x12,3
0001d6 c001      	RJMP _0x2000007
                 _0x2000006:
0001d7 9893      	CBI  0x12,3
                 _0x2000007:
0001d8 81e8      	LD   R30,Y
0001d9 74e0      	ANDI R30,LOW(0x40)
0001da f011      	BREQ _0x2000008
0001db 9a92      	SBI  0x12,2
0001dc c001      	RJMP _0x2000009
                 _0x2000008:
0001dd 9892      	CBI  0x12,2
                 _0x2000009:
0001de 81e8      	LD   R30,Y
0001df 78e0      	ANDI R30,LOW(0x80)
0001e0 f011      	BREQ _0x200000A
0001e1 9a91      	SBI  0x12,1
0001e2 c001      	RJMP _0x200000B
                 _0x200000A:
0001e3 9891      	CBI  0x12,1
                 _0x200000B:
                +
0001e4 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0001e5 958a     +DEC R24
0001e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
0001e7 9a95      	SBI  0x12,5
                +
0001e8 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001e9 958a     +DEC R24
0001ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0001eb 9895      	CBI  0x12,5
                +
0001ec e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001ed 958a     +DEC R24
0001ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0001ef c070      	RJMP _0x2020001
                 __lcd_write_data:
0001f0 81e8      	LD   R30,Y
0001f1 d162      	RCALL SUBOPT_0x18
0001f2 81e8          ld    r30,y
0001f3 95e2          swap  r30
0001f4 83e8          st    y,r30
0001f5 81e8      	LD   R30,Y
0001f6 d15d      	RCALL SUBOPT_0x18
                +
0001f7 ec88     +LDI R24 , LOW ( 200 )
0001f8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001f9 9701     +SBIW R24 , 1
0001fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001fb c064      	RJMP _0x2020001
                 _lcd_gotoxy:
0001fc 81e8      	LD   R30,Y
0001fd e0f0      	LDI  R31,0
0001fe 57ec      	SUBI R30,LOW(-__base_y_G100)
0001ff 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000200 81e0      	LD   R30,Z
000201 81a9      	LDD  R26,Y+1
000202 0fea      	ADD  R30,R26
000203 d152      	RCALL SUBOPT_0x19
000204 8049      	LDD  R4,Y+1
000205 80b8      	LDD  R11,Y+0
000206 9622      	ADIW R28,2
000207 9508      	RET
                 _lcd_clear:
000208 e0e2      	LDI  R30,LOW(2)
000209 d14c      	RCALL SUBOPT_0x19
00020a d14d      	RCALL SUBOPT_0x1A
00020b e0ec      	LDI  R30,LOW(12)
00020c d149      	RCALL SUBOPT_0x19
00020d d13d      	RCALL SUBOPT_0x16
00020e dfe1      	RCALL __lcd_write_data
00020f d148      	RCALL SUBOPT_0x1A
000210 e0e0      	LDI  R30,LOW(0)
000211 2ebe      	MOV  R11,R30
000212 2e4e      	MOV  R4,R30
000213 9508      	RET
                 _lcd_putchar:
000214 81a8      	LD   R26,Y
000215 30aa      	CPI  R26,LOW(0xA)
000216 f011      	BREQ _0x2000011
000217 144a      	CP   R4,R10
000218 f040      	BRLO _0x2000010
                 _0x2000011:
000219 d12e      	RCALL SUBOPT_0x15
00021a 94b3      	INC  R11
00021b 92ba      	ST   -Y,R11
00021c dfdf      	RCALL _lcd_gotoxy
00021d 81a8      	LD   R26,Y
00021e 30aa      	CPI  R26,LOW(0xA)
00021f f409      	BRNE _0x2000013
000220 c03f      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
000221 9443      	INC  R4
000222 9a97      	SBI  0x12,7
000223 81e8      	LD   R30,Y
000224 d131      	RCALL SUBOPT_0x19
000225 9897      	CBI  0x12,7
000226 c039      	RJMP _0x2020001
                 _lcd_putsf:
000227 931a      	ST   -Y,R17
                 _0x2000017:
000228 81e9      	LDD  R30,Y+1
000229 81fa      	LDD  R31,Y+1+1
00022a 9631      	ADIW R30,1
00022b 83e9      	STD  Y+1,R30
00022c 83fa      	STD  Y+1+1,R31
00022d 9731      	SBIW R30,1
00022e 91e4      	LPM  R30,Z
00022f 2f1e      	MOV  R17,R30
000230 30e0      	CPI  R30,0
000231 f019      	BREQ _0x2000019
000232 931a      	ST   -Y,R17
000233 dfe0      	RCALL _lcd_putchar
000234 cff3      	RJMP _0x2000017
                 _0x2000019:
000235 8118      	LDD  R17,Y+0
000236 9623      	ADIW R28,3
000237 9508      	RET
                 _lcd_init:
000238 9a8c      	SBI  0x11,4
000239 9a8b      	SBI  0x11,3
00023a 9a8a      	SBI  0x11,2
00023b 9a89      	SBI  0x11,1
00023c 9a8d      	SBI  0x11,5
00023d 9a8f      	SBI  0x11,7
00023e 9a8e      	SBI  0x11,6
00023f 9895      	CBI  0x12,5
000240 9897      	CBI  0x12,7
000241 9896      	CBI  0x12,6
000242 80a8      	LDD  R10,Y+0
000243 81e8      	LD   R30,Y
000244 58e0      	SUBI R30,-LOW(128)
                +
000245 93e0 0186+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000247 81e8      	LD   R30,Y
000248 54e0      	SUBI R30,-LOW(192)
                +
000249 93e0 0187+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00024b e1e4      	LDI  R30,LOW(20)
00024c e0f0      	LDI  R31,HIGH(20)
00024d d05e      	RCALL SUBOPT_0x3
00024e d118      	RCALL _delay_ms
00024f e3e0      	LDI  R30,LOW(48)
000250 d103      	RCALL SUBOPT_0x18
000251 d10a      	RCALL SUBOPT_0x1B
000252 d109      	RCALL SUBOPT_0x1B
000253 d10e      	RCALL SUBOPT_0x1C
000254 e2e0      	LDI  R30,LOW(32)
000255 d0fe      	RCALL SUBOPT_0x18
000256 d10b      	RCALL SUBOPT_0x1C
000257 e2e8      	LDI  R30,LOW(40)
000258 d0fd      	RCALL SUBOPT_0x19
000259 e0e4      	LDI  R30,LOW(4)
00025a d0fb      	RCALL SUBOPT_0x19
00025b e8e5      	LDI  R30,LOW(133)
00025c d0f9      	RCALL SUBOPT_0x19
00025d e0e6      	LDI  R30,LOW(6)
00025e d0f7      	RCALL SUBOPT_0x19
00025f dfa8      	RCALL _lcd_clear
                 _0x2020001:
000260 9621      	ADIW R28,1
000261 9508      	RET
                 
                 	.ESEG
                 _nhietdodat:
000000 72 01     	.DW  0x172
                 _doamdat:
000002 58 02     	.DW  0x258
                 _timeoff:
000004 00 00     	.DW  0x0
                 
                 	.DSEG
                 _i:
000160           	.BYTE 0x4
                 _doamh:
000164           	.BYTE 0x4
                 _doaml:
000168           	.BYTE 0x4
                 _nhietdoh:
00016c           	.BYTE 0x4
                 _nhietdol:
000170           	.BYTE 0x4
                 _a:
000174           	.BYTE 0x4
                 _nhietdo:
000178           	.BYTE 0x4
                 _doam:
00017c           	.BYTE 0x4
                 _time1day:
000180           	.BYTE 0x4
                 __base_y_G100:
000184           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:49 WORDS
                 SUBOPT_0x0:
000262 972c      	SBIW R28,12
                +
000263 85ae     +LDD R26 , Y + 14
000264 85bf     +LDD R27 , Y + 14 + 1
000265 8988     +LDD R24 , Y + 14 + 2
000266 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
                +
000267 e6e4     +LDI R30 , LOW ( 0x64 )
000268 e0f0     +LDI R31 , HIGH ( 0x64 )
000269 e060     +LDI R22 , BYTE3 ( 0x64 )
00026a e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
00026b d16d      	RCALL __DIVD21
                +
00026c 87e8     +STD Y + 8 , R30
00026d 87f9     +STD Y + 8 + 1 , R31
00026e 876a     +STD Y + 8 + 2 , R22
00026f 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                +
000270 e6a4     +LDI R26 , LOW ( 0x64 )
000271 e0b0     +LDI R27 , HIGH ( 0x64 )
000272 e080     +LDI R24 , BYTE3 ( 0x64 )
000273 e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
000274 d13a      	RCALL __MULD12
                +
000275 85ae     +LDD R26 , Y + 14
000276 85bf     +LDD R27 , Y + 14 + 1
000277 8988     +LDD R24 , Y + 14 + 2
000278 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
000279 d103      	RCALL __SUBD21
                +
00027a e0ea     +LDI R30 , LOW ( 0xA )
00027b e0f0     +LDI R31 , HIGH ( 0xA )
00027c e060     +LDI R22 , BYTE3 ( 0xA )
00027d e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00027e d15a      	RCALL __DIVD21
                +
00027f 83ec     +STD Y + 4 , R30
000280 83fd     +STD Y + 4 + 1 , R31
000281 836e     +STD Y + 4 + 2 , R22
000282 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                +
000283 85e8     +LDD R30 , Y + 8
000284 85f9     +LDD R31 , Y + 8 + 1
000285 856a     +LDD R22 , Y + 8 + 2
000286 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000287 e6a4     +LDI R26 , LOW ( 0x64 )
000288 e0b0     +LDI R27 , HIGH ( 0x64 )
000289 e080     +LDI R24 , BYTE3 ( 0x64 )
00028a e090     +LDI R25 , BYTE4 ( 0x64 )
                 	__GETD2N 0x64
00028b d123      	RCALL __MULD12
                +
00028c 85ae     +LDD R26 , Y + 14
00028d 85bf     +LDD R27 , Y + 14 + 1
00028e 8988     +LDD R24 , Y + 14 + 2
00028f 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
000290 d174      	RCALL __SWAPD12
000291 d0e6      	RCALL __SUBD12
000292 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
                +
000293 81ec     +LDD R30 , Y + 4
000294 81fd     +LDD R31 , Y + 4 + 1
000295 816e     +LDD R22 , Y + 4 + 2
000296 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000297 e0aa     +LDI R26 , LOW ( 0xA )
000298 e0b0     +LDI R27 , HIGH ( 0xA )
000299 e080     +LDI R24 , BYTE3 ( 0xA )
00029a e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00029b d113      	RCALL __MULD12
00029c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
00029d d0df      	RCALL __SUBD21
00029e d15c      	RCALL __PUTD2S0
00029f 85ed      	LDD  R30,Y+13
0002a0 93ea      	ST   -Y,R30
0002a1 85ed      	LDD  R30,Y+13
0002a2 93ea      	ST   -Y,R30
0002a3 df58      	RCALL _lcd_gotoxy
0002a4 85e8      	LDD  R30,Y+8
0002a5 5de0      	SUBI R30,-LOW(48)
0002a6 93ea      	ST   -Y,R30
0002a7 df6c      	RCALL _lcd_putchar
0002a8 81ec      	LDD  R30,Y+4
0002a9 5de0      	SUBI R30,-LOW(48)
0002aa 93ea      	ST   -Y,R30
0002ab cf68      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002ac 93fa      	ST   -Y,R31
0002ad 93ea      	ST   -Y,R30
0002ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0002af 93e0 0170 	STS  _nhietdol,R30
0002b1 93f0 0171 	STS  _nhietdol+1,R31
0002b3 9360 0172 	STS  _nhietdol+2,R22
0002b5 9370 0173 	STS  _nhietdol+3,R23
0002b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0002b8 93e0 016c 	STS  _nhietdoh,R30
0002ba 93f0 016d 	STS  _nhietdoh+1,R31
0002bc 9360 016e 	STS  _nhietdoh+2,R22
0002be 9370 016f 	STS  _nhietdoh+3,R23
0002c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0002c1 93e0 0168 	STS  _doaml,R30
0002c3 93f0 0169 	STS  _doaml+1,R31
0002c5 9360 016a 	STS  _doaml+2,R22
0002c7 9370 016b 	STS  _doaml+3,R23
0002c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0002ca 93e0 0164 	STS  _doamh,R30
0002cc 93f0 0165 	STS  _doamh+1,R31
0002ce 9360 0166 	STS  _doamh+2,R22
0002d0 9370 0167 	STS  _doamh+3,R23
0002d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x8:
                +
0002d3 e8e0     +LDI R30 , LOW ( 0x80 )
0002d4 e0f0     +LDI R31 , HIGH ( 0x80 )
0002d5 e060     +LDI R22 , BYTE3 ( 0x80 )
0002d6 e070     +LDI R23 , BYTE4 ( 0x80 )
                 	__GETD1N 0x80
0002d7 93e0 0174 	STS  _a,R30
0002d9 93f0 0175 	STS  _a+1,R31
0002db 9360 0176 	STS  _a+2,R22
0002dd 9370 0177 	STS  _a+3,R23
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x9:
0002e0 e0e0      	LDI  R30,LOW(0)
0002e1 93e0 0160 	STS  _i,R30
0002e3 93e0 0161 	STS  _i+1,R30
0002e5 93e0 0162 	STS  _i+2,R30
0002e7 93e0 0163 	STS  _i+3,R30
0002e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:40 WORDS
                 SUBOPT_0xA:
0002ea 91a0 0160 	LDS  R26,_i
0002ec 91b0 0161 	LDS  R27,_i+1
0002ee 9180 0162 	LDS  R24,_i+2
0002f0 9190 0163 	LDS  R25,_i+3
                +
0002f2 30a8     +CPI R26 , LOW ( 0x8 )
0002f3 e0e0     +LDI R30 , HIGH ( 0x8 )
0002f4 07be     +CPC R27 , R30
0002f5 e0e0     +LDI R30 , BYTE3 ( 0x8 )
0002f6 078e     +CPC R24 , R30
0002f7 e0e0     +LDI R30 , BYTE4 ( 0x8 )
0002f8 079e     +CPC R25 , R30
                 	__CPD2N 0x8
0002f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
0002fa e0e0      	LDI  R30,LOW(0)
0002fb bfe2      	OUT  0x32,R30
0002fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0002fd e0e2      	LDI  R30,LOW(2)
0002fe bfe3      	OUT  0x33,R30
0002ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000300 b7e2      	IN   R30,0x32
000301 36e1      	CPI  R30,LOW(0x61)
000302 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xE:
000303 91e0 0174 	LDS  R30,_a
000305 91f0 0175 	LDS  R31,_a+1
000307 9160 0176 	LDS  R22,_a+2
000309 9170 0177 	LDS  R23,_a+3
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0xF:
00030c 91a0 0174 	LDS  R26,_a
00030e 91b0 0175 	LDS  R27,_a+1
000310 9180 0176 	LDS  R24,_a+2
000312 9190 0177 	LDS  R25,_a+3
                +
000314 e0e2     +LDI R30 , LOW ( 0x2 )
000315 e0f0     +LDI R31 , HIGH ( 0x2 )
000316 e060     +LDI R22 , BYTE3 ( 0x2 )
000317 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000318 d0c0      	RCALL __DIVD21
000319 93e0 0174 	STS  _a,R30
00031b 93f0 0175 	STS  _a+1,R31
00031d 9360 0176 	STS  _a+2,R22
00031f 9370 0177 	STS  _a+3,R23
000321 cfd8      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000322 e0e0      	LDI  R30,LOW(0)
000323 bfe3      	OUT  0x33,R30
000324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x11:
000325 e6a0      	LDI  R26,LOW(_i)
000326 e0b1      	LDI  R27,HIGH(_i)
000327 d0c9      	RCALL __GETD1P_INC
                +
000328 5fef     +SUBI R30 , LOW ( - 1 )
000329 4fff     +SBCI R31 , HIGH ( - 1 )
00032a 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00032b 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00032c d0c9      	RCALL __PUTDP1_DEC
00032d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
00032e 91a0 0168 	LDS  R26,_doaml
000330 91b0 0169 	LDS  R27,_doaml+1
000332 9180 016a 	LDS  R24,_doaml+2
000334 9190 016b 	LDS  R25,_doaml+3
000336 d03c      	RCALL __ADDD12
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
000338 91a0 0170 	LDS  R26,_nhietdol
00033a 91b0 0171 	LDS  R27,_nhietdol+1
00033c 9180 0172 	LDS  R24,_nhietdol+2
00033e 9190 0173 	LDS  R25,_nhietdol+3
000340 d032      	RCALL __ADDD12
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
                +
000342 e0a0     +LDI R26 , LOW ( 0x100 )
000343 e0b1     +LDI R27 , HIGH ( 0x100 )
000344 e080     +LDI R24 , BYTE3 ( 0x100 )
000345 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
000346 d068      	RCALL __MULD12
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
000348 e0e0      	LDI  R30,LOW(0)
000349 93ea      	ST   -Y,R30
00034a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
00034b e0e1      	LDI  R30,LOW(1)
00034c 93ea      	ST   -Y,R30
00034d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
00034e d0c3      	RCALL __EEPROMRDW
00034f d03a      	RCALL __CWD1
000350 d0af      	RCALL __PUTPARD1
000351 e0e7      	LDI  R30,LOW(7)
000352 93ea      	ST   -Y,R30
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000354 93ea      	ST   -Y,R30
000355 ce76      	RJMP __lcd_write_nibble_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x19:
000356 93ea      	ST   -Y,R30
000357 ce98      	RJMP __lcd_write_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000358 e0e3      	LDI  R30,LOW(3)
000359 e0f0      	LDI  R31,HIGH(3)
00035a df51      	RCALL SUBOPT_0x3
00035b c00b      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
                +
00035c e980     +LDI R24 , LOW ( 400 )
00035d e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00035e 9701     +SBIW R24 , 1
00035f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000360 e3e0      	LDI  R30,LOW(48)
000361 cff2      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
                +
000362 e980     +LDI R24 , LOW ( 400 )
000363 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000364 9701     +SBIW R24 , 1
000365 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000366 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000367 91e9      	ld   r30,y+
000368 91f9      	ld   r31,y+
000369 9630      	adiw r30,0
00036a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00036b ea80     +LDI R24 , LOW ( 0xFA0 )
00036c e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00036d 9701     +SBIW R24 , 1
00036e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00036f 95a8      	wdr
000370 9731      	sbiw r30,1
000371 f7c9      	brne __delay_ms0
                 __delay_ms1:
000372 9508      	ret
                 
                 __ADDD12:
000373 0fea      	ADD  R30,R26
000374 1ffb      	ADC  R31,R27
000375 1f68      	ADC  R22,R24
000376 1f79      	ADC  R23,R25
000377 9508      	RET
                 
                 __SUBD12:
000378 1bea      	SUB  R30,R26
000379 0bfb      	SBC  R31,R27
00037a 0b68      	SBC  R22,R24
00037b 0b79      	SBC  R23,R25
00037c 9508      	RET
                 
                 __SUBD21:
00037d 1bae      	SUB  R26,R30
00037e 0bbf      	SBC  R27,R31
00037f 0b86      	SBC  R24,R22
000380 0b97      	SBC  R25,R23
000381 9508      	RET
                 
                 __ANEGD1:
000382 95f0      	COM  R31
000383 9560      	COM  R22
000384 9570      	COM  R23
000385 95e1      	NEG  R30
000386 4fff      	SBCI R31,-1
000387 4f6f      	SBCI R22,-1
000388 4f7f      	SBCI R23,-1
000389 9508      	RET
                 
                 __CWD1:
00038a 2f6f      	MOV  R22,R31
00038b 0f66      	ADD  R22,R22
00038c 0b66      	SBC  R22,R22
00038d 2f76      	MOV  R23,R22
00038e 9508      	RET
                 
                 __MULD12U:
00038f 9f7a      	MUL  R23,R26
000390 2d70      	MOV  R23,R0
000391 9f6b      	MUL  R22,R27
000392 0d70      	ADD  R23,R0
000393 9ff8      	MUL  R31,R24
000394 0d70      	ADD  R23,R0
000395 9fe9      	MUL  R30,R25
000396 0d70      	ADD  R23,R0
000397 9f6a      	MUL  R22,R26
000398 2d60      	MOV  R22,R0
000399 0d71      	ADD  R23,R1
00039a 9ffb      	MUL  R31,R27
00039b 0d60      	ADD  R22,R0
00039c 1d71      	ADC  R23,R1
00039d 9fe8      	MUL  R30,R24
00039e 0d60      	ADD  R22,R0
00039f 1d71      	ADC  R23,R1
0003a0 2788      	CLR  R24
0003a1 9ffa      	MUL  R31,R26
0003a2 2df0      	MOV  R31,R0
0003a3 0d61      	ADD  R22,R1
0003a4 1f78      	ADC  R23,R24
0003a5 9feb      	MUL  R30,R27
0003a6 0df0      	ADD  R31,R0
0003a7 1d61      	ADC  R22,R1
0003a8 1f78      	ADC  R23,R24
0003a9 9fea      	MUL  R30,R26
0003aa 2de0      	MOV  R30,R0
0003ab 0df1      	ADD  R31,R1
0003ac 1f68      	ADC  R22,R24
0003ad 1f78      	ADC  R23,R24
0003ae 9508      	RET
                 
                 __MULD12:
0003af d02e      	RCALL __CHKSIGND
0003b0 dfde      	RCALL __MULD12U
0003b1 f40e      	BRTC __MULD121
0003b2 dfcf      	RCALL __ANEGD1
                 __MULD121:
0003b3 9508      	RET
                 
                 __DIVD21U:
0003b4 933f      	PUSH R19
0003b5 934f      	PUSH R20
0003b6 935f      	PUSH R21
0003b7 2400      	CLR  R0
0003b8 2411      	CLR  R1
0003b9 2744      	CLR  R20
0003ba 2755      	CLR  R21
0003bb e230      	LDI  R19,32
                 __DIVD21U1:
0003bc 0faa      	LSL  R26
0003bd 1fbb      	ROL  R27
0003be 1f88      	ROL  R24
0003bf 1f99      	ROL  R25
0003c0 1c00      	ROL  R0
0003c1 1c11      	ROL  R1
0003c2 1f44      	ROL  R20
0003c3 1f55      	ROL  R21
0003c4 1a0e      	SUB  R0,R30
0003c5 0a1f      	SBC  R1,R31
0003c6 0b46      	SBC  R20,R22
0003c7 0b57      	SBC  R21,R23
0003c8 f428      	BRCC __DIVD21U2
0003c9 0e0e      	ADD  R0,R30
0003ca 1e1f      	ADC  R1,R31
0003cb 1f46      	ADC  R20,R22
0003cc 1f57      	ADC  R21,R23
0003cd c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003ce 60a1      	SBR  R26,1
                 __DIVD21U3:
0003cf 953a      	DEC  R19
0003d0 f759      	BRNE __DIVD21U1
0003d1 01fd      	MOVW R30,R26
0003d2 01bc      	MOVW R22,R24
0003d3 01d0      	MOVW R26,R0
0003d4 01ca      	MOVW R24,R20
0003d5 915f      	POP  R21
0003d6 914f      	POP  R20
0003d7 913f      	POP  R19
0003d8 9508      	RET
                 
                 __DIVD21:
0003d9 d004      	RCALL __CHKSIGND
0003da dfd9      	RCALL __DIVD21U
0003db f40e      	BRTC __DIVD211
0003dc dfa5      	RCALL __ANEGD1
                 __DIVD211:
0003dd 9508      	RET
                 
                 __CHKSIGND:
0003de 94e8      	CLT
0003df ff77      	SBRS R23,7
0003e0 c002      	RJMP __CHKSD1
0003e1 dfa0      	RCALL __ANEGD1
0003e2 9468      	SET
                 __CHKSD1:
0003e3 ff97      	SBRS R25,7
0003e4 c00b      	RJMP __CHKSD2
0003e5 2400      	CLR  R0
0003e6 95a0      	COM  R26
0003e7 95b0      	COM  R27
0003e8 9580      	COM  R24
0003e9 9590      	COM  R25
0003ea 9611      	ADIW R26,1
0003eb 1d80      	ADC  R24,R0
0003ec 1d90      	ADC  R25,R0
0003ed f800      	BLD  R0,0
0003ee 9403      	INC  R0
0003ef fa00      	BST  R0,0
                 __CHKSD2:
0003f0 9508      	RET
                 
                 __GETD1P_INC:
0003f1 91ed      	LD   R30,X+
0003f2 91fd      	LD   R31,X+
0003f3 916d      	LD   R22,X+
0003f4 917d      	LD   R23,X+
0003f5 9508      	RET
                 
                 __PUTDP1_DEC:
0003f6 937e      	ST   -X,R23
0003f7 936e      	ST   -X,R22
0003f8 93fe      	ST   -X,R31
0003f9 93ee      	ST   -X,R30
0003fa 9508      	RET
                 
                 __PUTD2S0:
0003fb 83a8      	ST   Y,R26
0003fc 83b9      	STD  Y+1,R27
0003fd 838a      	STD  Y+2,R24
0003fe 839b      	STD  Y+3,R25
0003ff 9508      	RET
                 
                 __PUTPARD1:
000400 937a      	ST   -Y,R23
000401 936a      	ST   -Y,R22
000402 93fa      	ST   -Y,R31
000403 93ea      	ST   -Y,R30
000404 9508      	RET
                 
                 __SWAPD12:
000405 2e18      	MOV  R1,R24
000406 2f86      	MOV  R24,R22
000407 2d61      	MOV  R22,R1
000408 2e19      	MOV  R1,R25
000409 2f97      	MOV  R25,R23
00040a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00040b 2e1b      	MOV  R1,R27
00040c 2fbf      	MOV  R27,R31
00040d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00040e 2e1a      	MOV  R1,R26
00040f 2fae      	MOV  R26,R30
000410 2de1      	MOV  R30,R1
000411 9508      	RET
                 
                 __EEPROMRDW:
000412 9611      	ADIW R26,1
000413 d002      	RCALL __EEPROMRDB
000414 2ffe      	MOV  R31,R30
000415 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000416 99e1      	SBIC EECR,EEWE
000417 cffe      	RJMP __EEPROMRDB
000418 93ff      	PUSH R31
000419 b7ff      	IN   R31,SREG
00041a 94f8      	CLI
00041b bbae      	OUT  EEARL,R26
00041c bbbf      	OUT  EEARH,R27
00041d 9ae0      	SBI  EECR,EERE
00041e b3ed      	IN   R30,EEDR
00041f bfff      	OUT  SREG,R31
000420 91ff      	POP  R31
000421 9508      	RET
                 
                 __EEPROMWRW:
000422 d007      	RCALL __EEPROMWRB
000423 9611      	ADIW R26,1
000424 93ef      	PUSH R30
000425 2fef      	MOV  R30,R31
000426 d003      	RCALL __EEPROMWRB
000427 91ef      	POP  R30
000428 9711      	SBIW R26,1
000429 9508      	RET
                 
                 __EEPROMWRB:
00042a 9be1      	SBIS EECR,EEWE
00042b c002      	RJMP __EEPROMWRB1
00042c 95a8      	WDR
00042d cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00042e b79f      	IN   R25,SREG
00042f 94f8      	CLI
000430 bbae      	OUT  EEARL,R26
000431 bbbf      	OUT  EEARH,R27
000432 9ae0      	SBI  EECR,EERE
000433 b38d      	IN   R24,EEDR
000434 17e8      	CP   R30,R24
000435 f019      	BREQ __EEPROMWRB0
000436 bbed      	OUT  EEDR,R30
000437 9ae2      	SBI  EECR,EEMWE
000438 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000439 bf9f      	OUT  SREG,R25
00043a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  27 r1 :  21 r2 :   0 r3 :   0 r4 :   4 r5 :   0 r6 :   5 r7 :   3 
r8 :   3 r9 :   0 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  57 r23:  53 
r24:  65 r25:  40 r26:  59 r27:  41 r28:   6 r29:   1 r30: 236 r31:  72 
x  :  11 y  : 107 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :  13 
adiw  :  12 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   0 brmi  :   0 brne  :  19 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  12 
cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 clr   :  10 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 cp    :   4 
cpc   :   9 cpi   :   7 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 
inc   :   3 ld    :  33 ldd   :  31 ldi   : 132 lds   :  48 lpm   :   9 
lsl   :   1 lsr   :   0 mov   :  23 movw  :  12 mul   :  10 muls  :   0 
mulsu :   0 neg   :   1 nop   :   0 or    :   0 ori   :   0 out   :  51 
pop   :  13 push  :  13 rcall : 159 ret   :  48 reti  :   1 rjmp  :  61 
rol   :   7 ror   :   0 sbc   :  10 sbci  :  10 sbi   :  20 sbic  :   6 
sbis  :   7 sbiw  :  14 sbr   :   1 sbrc  :   0 sbrs  :   2 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  42 std   :  13 
sts   :  38 sub   :   3 subi  :   8 swap  :   1 tst   :   0 wdr   :   2 

Instructions used: 58 out of 114 (50.9%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000876   2144     22   2166    8192  26.4%
[.dseg] 0x000060 0x000188      0     40     40    1119   3.6%
[.eseg] 0x000000 0x000006      0      6      6     512   1.2%

Assembly complete, 0 errors, 6 warnings
