
AVRASM ver. 2.1.30  D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm Fri Nov 14 22:06:19 2014

D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1057): warning: Register r4 already defined by the .DEF directive
D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1058): warning: Register r6 already defined by the .DEF directive
D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1059): warning: Register r8 already defined by the .DEF directive
D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1060): warning: Register r10 already defined by the .DEF directive
D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1061): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega8
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count_am2301=R4
                 	.DEF _count_key=R6
                 	.DEF _count_delay=R8
                 	.DEF _count_lcd=R10
                 	.DEF _count_egg=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02c      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c053      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 _0xB:
000014 0000
000015 0000
000016 0000
000017 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000018 0000      	.DB  0x0,0x0
                 _0x0:
000019 3e3e
00001a 3e3e
00001b 514e
00001c 4620      	.DB  0x3E,0x3E,0x3E,0x3E,0x4E,0x51,0x20,0x46
00001d 6961
00001e 7972
00001f 3c3c
000020 3c3c      	.DB  0x61,0x69,0x72,0x79,0x3C,0x3C,0x3C,0x3C
D:\may ap trung\laptrinhaptrung-nga\New folder\List\wwddddd.asm(1100): warning: .cseg .db misalignment - padding zero byte
000021 0000      	.DB  0x0
                 _0x2000003:
000022 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000023 0001      	.DW  0x01
000024 0002      	.DW  0x02
000025 0026      	.DW  __REG_BIT_VARS*2
                 
000026 000a      	.DW  0x0A
000027 0004      	.DW  0x04
000028 0028      	.DW  _0xB*2
                 
000029 0002      	.DW  0x02
00002a 0160      	.DW  __base_y_G100
00002b 0044      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002c 0000      	.DW  0
                 
                 __RESET:
00002d 94f8      	CLI
00002e 27ee      	CLR  R30
00002f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000030 e0f1      	LDI  R31,1
000031 bffb      	OUT  GICR,R31
000032 bfeb      	OUT  GICR,R30
000033 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000034 e1f8      	LDI  R31,0x18
000035 bdf1      	OUT  WDTCR,R31
000036 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000037 e08d      	LDI  R24,(14-2)+1
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
                 __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000043 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b c03d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD Module functions
                 ;#include <alcd.h>
                 ;
                 ;////////////////////////////////////////
                 ;unsigned int count_am2301=0, count_key=0, count_delay=0, count_lcd=0;;
                 ;unsigned int count_egg=0;
                 ;bit set_am2301=0, set_key=0, set_egg, set_lcd;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
00005c 93ea      	ST   -Y,R30
00005d 93fa      	ST   -Y,R31
00005e b7ef      	IN   R30,SREG
00005f 93ea      	ST   -Y,R30
                 ; 0000 0017 // Reinitialize Timer1 value
                 ; 0000 0018 TCNT1H=0xFF05 >> 8;
000060 d11b      	RCALL SUBOPT_0x0
                 ; 0000 0019 TCNT1L=0xFF05 & 0xff;
                 ; 0000 001A // Place your code here
                 ; 0000 001B count_am2301++;
000061 01f2      	MOVW R30,R4
000062 9631      	ADIW R30,1
000063 012f      	MOVW R4,R30
                 ; 0000 001C count_key++;
000064 01f3      	MOVW R30,R6
000065 9631      	ADIW R30,1
000066 013f      	MOVW R6,R30
                 ; 0000 001D count_delay++;
000067 01f4      	MOVW R30,R8
000068 9631      	ADIW R30,1
000069 014f      	MOVW R8,R30
                 ; 0000 001E count_lcd++;
00006a 01f5      	MOVW R30,R10
00006b 9631      	ADIW R30,1
00006c 015f      	MOVW R10,R30
                 ; 0000 001F if (count_am2301 >= 1500) {set_am2301=1; count_egg++; count_am2301=0;}
00006d edec      	LDI  R30,LOW(1500)
00006e e0f5      	LDI  R31,HIGH(1500)
00006f 164e      	CP   R4,R30
000070 065f      	CPC  R5,R31
000071 f038      	BRLO _0x3
000072 9468      	SET
000073 f820      	BLD  R2,0
000074 01f6      	MOVW R30,R12
000075 9631      	ADIW R30,1
000076 016f      	MOVW R12,R30
000077 2444      	CLR  R4
000078 2455      	CLR  R5
                 ; 0000 0020 if (count_key >= 100) {set_key=1; count_key=0;}
                 _0x3:
000079 e6e4      	LDI  R30,LOW(100)
00007a e0f0      	LDI  R31,HIGH(100)
00007b 166e      	CP   R6,R30
00007c 067f      	CPC  R7,R31
00007d f020      	BRLO _0x4
00007e 9468      	SET
00007f f821      	BLD  R2,1
000080 2466      	CLR  R6
000081 2477      	CLR  R7
                 ; 0000 0021 if (count_egg >= 40) {set_egg=1; count_egg=0;}
                 _0x4:
000082 e2e8      	LDI  R30,LOW(40)
000083 e0f0      	LDI  R31,HIGH(40)
000084 16ce      	CP   R12,R30
000085 06df      	CPC  R13,R31
000086 f020      	BRLO _0x5
000087 9468      	SET
000088 f822      	BLD  R2,2
000089 24cc      	CLR  R12
00008a 24dd      	CLR  R13
                 ; 0000 0022 if (count_lcd >= 200) {set_lcd=1; count_lcd=0;}
                 _0x5:
00008b ece8      	LDI  R30,LOW(200)
00008c e0f0      	LDI  R31,HIGH(200)
00008d 16ae      	CP   R10,R30
00008e 06bf      	CPC  R11,R31
00008f f020      	BRLO _0x6
000090 9468      	SET
000091 f823      	BLD  R2,3
000092 24aa      	CLR  R10
000093 24bb      	CLR  R11
                 ; 0000 0023 
                 ; 0000 0024 }
                 _0x6:
000094 91e9      	LD   R30,Y+
000095 bfef      	OUT  SREG,R30
000096 91f9      	LD   R31,Y+
000097 91e9      	LD   R30,Y+
000098 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0029 {
                 _main:
                 ; 0000 002A // Declare your local variables here
                 ; 0000 002B 
                 ; 0000 002C // Input/Output Ports initialization
                 ; 0000 002D // Port B initialization
                 ; 0000 002E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 002F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0030 PORTB=0x00;
000099 e0e0      	LDI  R30,LOW(0)
00009a bbe8      	OUT  0x18,R30
                 ; 0000 0031 DDRB=0x00;
00009b bbe7      	OUT  0x17,R30
                 ; 0000 0032 
                 ; 0000 0033 // Port C initialization
                 ; 0000 0034 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0035 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0036 PORTC=0x00;
00009c bbe5      	OUT  0x15,R30
                 ; 0000 0037 DDRC=0x00;
00009d bbe4      	OUT  0x14,R30
                 ; 0000 0038 
                 ; 0000 0039 // Port D initialization
                 ; 0000 003A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 003B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 003C PORTD=0x00;
00009e bbe2      	OUT  0x12,R30
                 ; 0000 003D DDRD=0x00;
00009f bbe1      	OUT  0x11,R30
                 ; 0000 003E 
                 ; 0000 003F // Timer/Counter 0 initialization
                 ; 0000 0040 // Clock source: System Clock
                 ; 0000 0041 // Clock value: Timer 0 Stopped
                 ; 0000 0042 TCCR0=0x00;
0000a0 bfe3      	OUT  0x33,R30
                 ; 0000 0043 TCNT0=0x00;
0000a1 bfe2      	OUT  0x32,R30
                 ; 0000 0044 
                 ; 0000 0045 // Timer/Counter 1 initialization
                 ; 0000 0046 // Clock source: System Clock
                 ; 0000 0047 // Clock value: 250.000 kHz
                 ; 0000 0048 // Mode: Normal top=0xFFFF
                 ; 0000 0049 // OC1A output: Discon.
                 ; 0000 004A // OC1B output: Discon.
                 ; 0000 004B // Noise Canceler: Off
                 ; 0000 004C // Input Capture on Falling Edge
                 ; 0000 004D // Timer1 Overflow Interrupt: On
                 ; 0000 004E // Input Capture Interrupt: Off
                 ; 0000 004F // Compare A Match Interrupt: Off
                 ; 0000 0050 // Compare B Match Interrupt: Off
                 ; 0000 0051 TCCR1A=0x00;
0000a2 bdef      	OUT  0x2F,R30
                 ; 0000 0052 TCCR1B=0x03;
0000a3 e0e3      	LDI  R30,LOW(3)
0000a4 bdee      	OUT  0x2E,R30
                 ; 0000 0053 TCNT1H=0xFF;
0000a5 d0d6      	RCALL SUBOPT_0x0
                 ; 0000 0054 TCNT1L=0x05;
                 ; 0000 0055 ICR1H=0x00;
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 bde7      	OUT  0x27,R30
                 ; 0000 0056 ICR1L=0x00;
0000a8 bde6      	OUT  0x26,R30
                 ; 0000 0057 OCR1AH=0x00;
0000a9 bdeb      	OUT  0x2B,R30
                 ; 0000 0058 OCR1AL=0x00;
0000aa bdea      	OUT  0x2A,R30
                 ; 0000 0059 OCR1BH=0x00;
0000ab bde9      	OUT  0x29,R30
                 ; 0000 005A OCR1BL=0x00;
0000ac bde8      	OUT  0x28,R30
                 ; 0000 005B 
                 ; 0000 005C // Timer/Counter 2 initialization
                 ; 0000 005D // Clock source: System Clock
                 ; 0000 005E // Clock value: Timer2 Stopped
                 ; 0000 005F // Mode: Normal top=0xFF
                 ; 0000 0060 // OC2 output: Disconnected
                 ; 0000 0061 ASSR=0x00;
0000ad bde2      	OUT  0x22,R30
                 ; 0000 0062 TCCR2=0x00;
0000ae bde5      	OUT  0x25,R30
                 ; 0000 0063 TCNT2=0x00;
0000af bde4      	OUT  0x24,R30
                 ; 0000 0064 OCR2=0x00;
0000b0 bde3      	OUT  0x23,R30
                 ; 0000 0065 
                 ; 0000 0066 // External Interrupt(s) initialization
                 ; 0000 0067 // INT0: Off
                 ; 0000 0068 // INT1: Off
                 ; 0000 0069 MCUCR=0x00;
0000b1 bfe5      	OUT  0x35,R30
                 ; 0000 006A 
                 ; 0000 006B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 006C TIMSK=0x04;
0000b2 e0e4      	LDI  R30,LOW(4)
0000b3 bfe9      	OUT  0x39,R30
                 ; 0000 006D 
                 ; 0000 006E // USART initialization
                 ; 0000 006F // USART disabled
                 ; 0000 0070 UCSRB=0x00;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 b9ea      	OUT  0xA,R30
                 ; 0000 0071 
                 ; 0000 0072 // Analog Comparator initialization
                 ; 0000 0073 // Analog Comparator: Off
                 ; 0000 0074 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0075 ACSR=0x80;
0000b6 e8e0      	LDI  R30,LOW(128)
0000b7 b9e8      	OUT  0x8,R30
                 ; 0000 0076 SFIOR=0x00;
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 bfe0      	OUT  0x30,R30
                 ; 0000 0077 
                 ; 0000 0078 // ADC initialization
                 ; 0000 0079 // ADC disabled
                 ; 0000 007A ADCSRA=0x00;
0000ba b9e6      	OUT  0x6,R30
                 ; 0000 007B 
                 ; 0000 007C // SPI initialization
                 ; 0000 007D // SPI disabled
                 ; 0000 007E SPCR=0x00;
0000bb b9ed      	OUT  0xD,R30
                 ; 0000 007F 
                 ; 0000 0080 // TWI initialization
                 ; 0000 0081 // TWI disabled
                 ; 0000 0082 TWCR=0x00;
0000bc bfe6      	OUT  0x36,R30
                 ; 0000 0083 
                 ; 0000 0084 // Alphanumeric LCD initialization
                 ; 0000 0085 // Connections specified in the
                 ; 0000 0086 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0087 // RS - PORTD Bit 1
                 ; 0000 0088 // RD - PORTD Bit 2
                 ; 0000 0089 // EN - PORTD Bit 3
                 ; 0000 008A // D4 - PORTD Bit 4
                 ; 0000 008B // D5 - PORTD Bit 5
                 ; 0000 008C // D6 - PORTD Bit 6
                 ; 0000 008D // D7 - PORTD Bit 7
                 ; 0000 008E // Characters/line: 16
                 ; 0000 008F lcd_init(16);
0000bd e1e0      	LDI  R30,LOW(16)
0000be 93ea      	ST   -Y,R30
0000bf d092      	RCALL _lcd_init
                 ; 0000 0090 
                 ; 0000 0091 // Watchdog Timer initialization
                 ; 0000 0092 // Watchdog Timer Prescaler: OSC/2048k
                 ; 0000 0093 #pragma optsize-
                 ; 0000 0094 WDTCR=0x1F;
0000c0 e1ef      	LDI  R30,LOW(31)
0000c1 bde1      	OUT  0x21,R30
                 ; 0000 0095 WDTCR=0x0F;
0000c2 e0ef      	LDI  R30,LOW(15)
0000c3 bde1      	OUT  0x21,R30
                 ; 0000 0096 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0097 #pragma optsize+
                 ; 0000 0098 #endif
                 ; 0000 0099 
                 ; 0000 009A // Global enable interrupts
                 ; 0000 009B #asm("sei")
0000c4 9478      	sei
                 ; 0000 009C 
                 ; 0000 009D lcd_putsf(">>>>NQ Fairy<<<<");
                +
0000c5 e3e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c7 d0b9      	RCALL SUBOPT_0x1
0000c8 d078      	RCALL _lcd_putsf
                 ; 0000 009E delay_ms(700);
0000c9 ebec      	LDI  R30,LOW(700)
0000ca e0f2      	LDI  R31,HIGH(700)
0000cb d0b8      	RCALL SUBOPT_0x2
                 ; 0000 009F lcd_clear();
0000cc d042      	RCALL _lcd_clear
                 ; 0000 00A0 while (1)
                 _0x7:
                 ; 0000 00A1       {
                 ; 0000 00A2       // Place your code here
                 ; 0000 00A3 
                 ; 0000 00A4       }
0000cd cfff      	RJMP _0x7
                 ; 0000 00A5 }
                 _0xA:
0000ce cfff      	RJMP _0xA
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000cf 81e8      	LD   R30,Y
0000d0 71e0      	ANDI R30,LOW(0x10)
0000d1 f011      	BREQ _0x2000004
0000d2 9a94      	SBI  0x12,4
0000d3 c001      	RJMP _0x2000005
                 _0x2000004:
0000d4 9894      	CBI  0x12,4
                 _0x2000005:
0000d5 81e8      	LD   R30,Y
0000d6 72e0      	ANDI R30,LOW(0x20)
0000d7 f011      	BREQ _0x2000006
0000d8 9a95      	SBI  0x12,5
0000d9 c001      	RJMP _0x2000007
                 _0x2000006:
0000da 9895      	CBI  0x12,5
                 _0x2000007:
0000db 81e8      	LD   R30,Y
0000dc 74e0      	ANDI R30,LOW(0x40)
0000dd f011      	BREQ _0x2000008
0000de 9a96      	SBI  0x12,6
0000df c001      	RJMP _0x2000009
                 _0x2000008:
0000e0 9896      	CBI  0x12,6
                 _0x2000009:
0000e1 81e8      	LD   R30,Y
0000e2 78e0      	ANDI R30,LOW(0x80)
0000e3 f011      	BREQ _0x200000A
0000e4 9a97      	SBI  0x12,7
0000e5 c001      	RJMP _0x200000B
                 _0x200000A:
0000e6 9897      	CBI  0x12,7
                 _0x200000B:
                +
0000e7 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
0000e8 958a     +DEC R24
0000e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
0000ea 9a93      	SBI  0x12,3
                +
0000eb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000ec 958a     +DEC R24
0000ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000ee 9893      	CBI  0x12,3
                +
0000ef e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f0 958a     +DEC R24
0000f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f2 c087      	RJMP _0x2020001
                 __lcd_write_data:
0000f3 81e8      	LD   R30,Y
0000f4 d091      	RCALL SUBOPT_0x3
0000f5 81e8          ld    r30,y
0000f6 95e2          swap  r30
0000f7 83e8          st    y,r30
0000f8 81e8      	LD   R30,Y
0000f9 d08c      	RCALL SUBOPT_0x3
                +
0000fa ec88     +LDI R24 , LOW ( 200 )
0000fb e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0000fc 9701     +SBIW R24 , 1
0000fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0000fe c07b      	RJMP _0x2020001
                 _lcd_gotoxy:
0000ff 81e8      	LD   R30,Y
000100 e0f0      	LDI  R31,0
000101 5ae0      	SUBI R30,LOW(-__base_y_G100)
000102 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000103 81e0      	LD   R30,Z
000104 81a9      	LDD  R26,Y+1
000105 0fea      	ADD  R30,R26
000106 d081      	RCALL SUBOPT_0x4
000107 81e9      	LDD  R30,Y+1
000108 93e0 0164 	STS  __lcd_x,R30
00010a 81e8      	LD   R30,Y
00010b 93e0 0165 	STS  __lcd_y,R30
00010d 9622      	ADIW R28,2
00010e 9508      	RET
                 _lcd_clear:
00010f e0e2      	LDI  R30,LOW(2)
000110 d077      	RCALL SUBOPT_0x4
000111 e0e3      	LDI  R30,LOW(3)
000112 e0f0      	LDI  R31,HIGH(3)
000113 d070      	RCALL SUBOPT_0x2
000114 e0ec      	LDI  R30,LOW(12)
000115 d072      	RCALL SUBOPT_0x4
000116 e0e1      	LDI  R30,LOW(1)
000117 d070      	RCALL SUBOPT_0x4
000118 e0e3      	LDI  R30,LOW(3)
000119 e0f0      	LDI  R31,HIGH(3)
00011a d069      	RCALL SUBOPT_0x2
00011b e0e0      	LDI  R30,LOW(0)
00011c 93e0 0165 	STS  __lcd_y,R30
00011e 93e0 0164 	STS  __lcd_x,R30
000120 9508      	RET
                 _lcd_putchar:
000121 81a8      	LD   R26,Y
000122 30aa      	CPI  R26,LOW(0xA)
000123 f031      	BREQ _0x2000011
000124 91e0 0166 	LDS  R30,__lcd_maxx
000126 91a0 0164 	LDS  R26,__lcd_x
000128 17ae      	CP   R26,R30
000129 f068      	BRLO _0x2000010
                 _0x2000011:
00012a e0e0      	LDI  R30,LOW(0)
00012b 93ea      	ST   -Y,R30
00012c 91e0 0165 	LDS  R30,__lcd_y
00012e 5fef      	SUBI R30,-LOW(1)
00012f 93e0 0165 	STS  __lcd_y,R30
000131 93ea      	ST   -Y,R30
000132 dfcc      	RCALL _lcd_gotoxy
000133 81a8      	LD   R26,Y
000134 30aa      	CPI  R26,LOW(0xA)
000135 f409      	BRNE _0x2000013
000136 c043      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
000137 91e0 0164 	LDS  R30,__lcd_x
000139 5fef      	SUBI R30,-LOW(1)
00013a 93e0 0164 	STS  __lcd_x,R30
00013c 9a91      	SBI  0x12,1
00013d 81e8      	LD   R30,Y
00013e d049      	RCALL SUBOPT_0x4
00013f 9891      	CBI  0x12,1
000140 c039      	RJMP _0x2020001
                 _lcd_putsf:
000141 931a      	ST   -Y,R17
                 _0x2000017:
000142 81e9      	LDD  R30,Y+1
000143 81fa      	LDD  R31,Y+1+1
000144 9631      	ADIW R30,1
000145 83e9      	STD  Y+1,R30
000146 83fa      	STD  Y+1+1,R31
000147 9731      	SBIW R30,1
000148 91e4      	LPM  R30,Z
000149 2f1e      	MOV  R17,R30
00014a 30e0      	CPI  R30,0
00014b f019      	BREQ _0x2000019
00014c 931a      	ST   -Y,R17
00014d dfd3      	RCALL _lcd_putchar
00014e cff3      	RJMP _0x2000017
                 _0x2000019:
00014f 8118      	LDD  R17,Y+0
000150 9623      	ADIW R28,3
000151 9508      	RET
                 _lcd_init:
000152 9a8c      	SBI  0x11,4
000153 9a8d      	SBI  0x11,5
000154 9a8e      	SBI  0x11,6
000155 9a8f      	SBI  0x11,7
000156 9a8b      	SBI  0x11,3
000157 9a89      	SBI  0x11,1
000158 9a8a      	SBI  0x11,2
000159 9893      	CBI  0x12,3
00015a 9891      	CBI  0x12,1
00015b 9892      	CBI  0x12,2
00015c 81e8      	LD   R30,Y
00015d 93e0 0166 	STS  __lcd_maxx,R30
00015f 58e0      	SUBI R30,-LOW(128)
                +
000160 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000162 81e8      	LD   R30,Y
000163 54e0      	SUBI R30,-LOW(192)
                +
000164 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000166 e1e4      	LDI  R30,LOW(20)
000167 e0f0      	LDI  R31,HIGH(20)
000168 d01b      	RCALL SUBOPT_0x2
000169 e3e0      	LDI  R30,LOW(48)
00016a d01b      	RCALL SUBOPT_0x3
00016b d01e      	RCALL SUBOPT_0x5
00016c d01d      	RCALL SUBOPT_0x5
00016d d022      	RCALL SUBOPT_0x6
00016e e2e0      	LDI  R30,LOW(32)
00016f d016      	RCALL SUBOPT_0x3
000170 d01f      	RCALL SUBOPT_0x6
000171 e2e8      	LDI  R30,LOW(40)
000172 d015      	RCALL SUBOPT_0x4
000173 e0e4      	LDI  R30,LOW(4)
000174 d013      	RCALL SUBOPT_0x4
000175 e8e5      	LDI  R30,LOW(133)
000176 d011      	RCALL SUBOPT_0x4
000177 e0e6      	LDI  R30,LOW(6)
000178 d00f      	RCALL SUBOPT_0x4
000179 df95      	RCALL _lcd_clear
                 _0x2020001:
00017a 9621      	ADIW R28,1
00017b 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 __lcd_x:
000164           	.BYTE 0x1
                 __lcd_y:
000165           	.BYTE 0x1
                 __lcd_maxx:
000166           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00017c efef      	LDI  R30,LOW(255)
00017d bded      	OUT  0x2D,R30
00017e e0e5      	LDI  R30,LOW(5)
00017f bdec      	OUT  0x2C,R30
000180 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000181 93fa      	ST   -Y,R31
000182 93ea      	ST   -Y,R30
000183 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000184 dffc      	RCALL SUBOPT_0x1
000185 c00f      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000186 93ea      	ST   -Y,R30
000187 cf47      	RJMP __lcd_write_nibble_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000188 93ea      	ST   -Y,R30
000189 cf69      	RJMP __lcd_write_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
                +
00018a e980     +LDI R24 , LOW ( 400 )
00018b e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00018c 9701     +SBIW R24 , 1
00018d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00018e e3e0      	LDI  R30,LOW(48)
00018f cff6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
000190 e980     +LDI R24 , LOW ( 400 )
000191 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000192 9701     +SBIW R24 , 1
000193 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000194 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000195 91e9      	ld   r30,y+
000196 91f9      	ld   r31,y+
000197 9630      	adiw r30,0
000198 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000199 ea80     +LDI R24 , LOW ( 0xFA0 )
00019a e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00019b 9701     +SBIW R24 , 1
00019c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00019d 95a8      	wdr
00019e 9731      	sbiw r30,1
00019f f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a0 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   4 r1 :   1 r2 :   4 r3 :   0 r4 :   4 r5 :   2 r6 :   4 r7 :   2 
r8 :   2 r9 :   0 r10:   4 r11:   2 r12:   4 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   6 r26:  11 r27:   2 r28:   4 r29:   1 r30: 160 r31:  26 
x  :   3 y  :  39 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :  10 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   9 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  10 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   4 cpi   :   3 cpse  :   0 dec   :   4 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :  20 ldd   :   5 ldi   :  67 lds   :   4 lpm   :   9 
lsl   :   0 lsr   :   0 mov   :   1 movw  :  13 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  41 
pop   :   0 push  :   0 rcall :  31 ret   :   8 reti  :   1 rjmp  :  36 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 sbi   :  13 sbic  :   0 
sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   4 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  16 std   :   2 
sts   :   9 sub   :   0 subi  :   5 swap  :   1 tst   :   0 wdr   :   1 

Instructions used: 38 out of 114 (33.3%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000342    782     52    834    8192  10.2%
[.dseg] 0x000060 0x000167      0      7      7    1119   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
